diff -pruN --exclude build ./demo_clean/CMakeLists.txt ./demo_dev/CMakeLists.txt
--- ./demo_clean/CMakeLists.txt	2025-02-14 07:18:07.000000000 +0000
+++ ./demo_dev/CMakeLists.txt	2025-03-23 03:12:21.205355509 +0000
@@ -3,7 +3,7 @@ cmake_minimum_required(VERSION 3.16)
 # Set app name.
 set(APP_NAME Demo)
 # Set directory paths.
-set(SDK_ROOT_PATH ${CMAKE_CURRENT_SOURCE_DIR}/../../../..)
+set(SDK_ROOT_PATH ${CMAKE_CURRENT_SOURCE_DIR}/../CubismSdkForNative-5-r.3)
 set(CORE_PATH ${SDK_ROOT_PATH}/Core)
 set(FRAMEWORK_PATH ${SDK_ROOT_PATH}/Framework)
 set(THIRD_PARTY_PATH ${SDK_ROOT_PATH}/Samples/OpenGL/thirdParty)
@@ -11,7 +11,6 @@ set(STB_PATH ${THIRD_PARTY_PATH}/stb)
 set(GLEW_PATH ${THIRD_PARTY_PATH}/glew)
 set(GLFW_PATH ${THIRD_PARTY_PATH}/glfw)
 set(RES_PATH ${SDK_ROOT_PATH}/Samples/Resources)
-set(SAMPLE_SHADER_PATH ${SDK_ROOT_PATH}/Samples/OpenGL/Shaders/Standard)
 
 # Set project.
 project(${APP_NAME})
@@ -33,7 +32,7 @@ set(GLFW_INSTALL OFF CACHE BOOL "" FORCE
 set(BUILD_UTILS OFF CACHE BOOL "" FORCE)
 
 # Specify version of compiler.
-set(CMAKE_CXX_STANDARD 14)
+set(CMAKE_CXX_STANDARD 17)
 set(CMAKE_CXX_STANDARD_REQUIRED ON)
 set(CMAKE_CXX_EXTENSIONS OFF)
 
@@ -65,26 +64,31 @@ target_link_libraries(Framework Live2DCu
 # Find opengl libraries.
 find_package(OpenGL REQUIRED)
 
+# Add FacialLandmarksForCubism
+add_subdirectory(../.. FacialLandmarksForCubism_build)
+
 # Make executable app.
 add_executable(${APP_NAME})
 # Add source files.
 add_subdirectory(src)
-
 # Link libraries to app.
 target_link_libraries(${APP_NAME}
   Framework
   glfw
   ${OPENGL_LIBRARIES}
+  FacialLandmarksForCubism
+  stdc++fs
 )
 # Specify include directories.
-target_include_directories(${APP_NAME} PRIVATE ${STB_PATH})
+target_include_directories(${APP_NAME} PRIVATE ${STB_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/../../include)
 
 # Copy resource directory to build directory.
 add_custom_command(
   TARGET ${APP_NAME}
   POST_BUILD
-  COMMAND ${CMAKE_COMMAND} -E copy_directory ${RES_PATH} $<TARGET_FILE_DIR:${APP_NAME}>/Resources
-  COMMAND ${CMAKE_COMMAND} -E copy_directory ${SAMPLE_SHADER_PATH} $<TARGET_FILE_DIR:${APP_NAME}>/SampleShaders
+  COMMAND
+    ${CMAKE_COMMAND} -E
+      copy_directory ${RES_PATH} $<TARGET_FILE_DIR:${APP_NAME}>/Resources
 )
 
 # You can change target that renderer draws by enabling following definition.
diff -pruN --exclude build ./demo_clean/scripts/make_gcc ./demo_dev/scripts/make_gcc
--- ./demo_clean/scripts/make_gcc	2025-02-14 07:18:07.000000000 +0000
+++ ./demo_dev/scripts/make_gcc	2023-05-28 08:11:25.750067591 +0100
@@ -5,42 +5,9 @@ set -ue
 SCRIPT_PATH=$(cd $(dirname $0) && pwd)
 CMAKE_PATH=$SCRIPT_PATH/..
 BUILD_PATH=$SCRIPT_PATH/../build/make_gcc
-MINIMUM_DEMO="OFF"
-DATA=""
-
-if [ "$#" -ne 0 ]; then
- DATA="$1"
-fi
-
-while :
-do
-
- if [ -z "$DATA" ]; then
-   echo "Choose which format you would like to create the demo."
-   echo "Full version : 1"
-   echo "Minimum version : 2"
-   read -p "Your Choice : " DATA
- fi
-
- case "$DATA" in
-   "1" )
-     echo "Making Full Demo"
-     MINIMUM_DEMO="OFF"
-     break ;;
-   "2" )
-     echo "Making Minimum Demo"
-     MINIMUM_DEMO="ON"
-     break ;;
-   * )
-     echo "You need to enter a valid number."
-     DATA="" ;;
- esac
-done
 
 # Run CMake.
 cmake -S "$CMAKE_PATH" \
   -B "$BUILD_PATH" \
-  -D CMAKE_BUILD_TYPE=Release \
-  -D CSM_MINIMUM_DEMO=$MINIMUM_DEMO \
-  -D GLFW_BUILD_WAYLAND=OFF
-cd "$BUILD_PATH" && make
+  -D CMAKE_BUILD_TYPE=Release
+cd "$BUILD_PATH" && make -j4
diff -pruN --exclude build ./demo_clean/src/CMakeLists.txt ./demo_dev/src/CMakeLists.txt
--- ./demo_clean/src/CMakeLists.txt	2025-02-14 07:18:07.000000000 +0000
+++ ./demo_dev/src/CMakeLists.txt	2024-03-28 18:01:22.284448149 +0000
@@ -1,51 +1,22 @@
-if (CSM_MINIMUM_DEMO)
-  target_sources(${APP_NAME}
+target_sources(${APP_NAME}
   PRIVATE
     ${CMAKE_CURRENT_SOURCE_DIR}/LAppAllocator.cpp
     ${CMAKE_CURRENT_SOURCE_DIR}/LAppAllocator.hpp
     ${CMAKE_CURRENT_SOURCE_DIR}/LAppDefine.cpp
     ${CMAKE_CURRENT_SOURCE_DIR}/LAppDefine.hpp
+    ${CMAKE_CURRENT_SOURCE_DIR}/LAppDelegate.cpp
+    ${CMAKE_CURRENT_SOURCE_DIR}/LAppDelegate.hpp
+    ${CMAKE_CURRENT_SOURCE_DIR}/LAppLive2DManager.cpp
+    ${CMAKE_CURRENT_SOURCE_DIR}/LAppLive2DManager.hpp
+    ${CMAKE_CURRENT_SOURCE_DIR}/LAppModel.cpp
+    ${CMAKE_CURRENT_SOURCE_DIR}/LAppModel.hpp
     ${CMAKE_CURRENT_SOURCE_DIR}/LAppPal.cpp
     ${CMAKE_CURRENT_SOURCE_DIR}/LAppPal.hpp
+    ${CMAKE_CURRENT_SOURCE_DIR}/LAppSprite.cpp
+    ${CMAKE_CURRENT_SOURCE_DIR}/LAppSprite.hpp
     ${CMAKE_CURRENT_SOURCE_DIR}/LAppTextureManager.cpp
     ${CMAKE_CURRENT_SOURCE_DIR}/LAppTextureManager.hpp
-    ${CMAKE_CURRENT_SOURCE_DIR}/mainMinimum.cpp
-    ${CMAKE_CURRENT_SOURCE_DIR}/TouchManager.cpp
-    ${CMAKE_CURRENT_SOURCE_DIR}/TouchManager.hpp
-    ${CMAKE_CURRENT_SOURCE_DIR}/CubismUserModelExtend.cpp
-    ${CMAKE_CURRENT_SOURCE_DIR}/CubismUserModelExtend.hpp
-    ${CMAKE_CURRENT_SOURCE_DIR}/CubismSampleViewMatrix.cpp
-    ${CMAKE_CURRENT_SOURCE_DIR}/CubismSampleViewMatrix.hpp
-    ${CMAKE_CURRENT_SOURCE_DIR}/MouseActionManager.cpp
-    ${CMAKE_CURRENT_SOURCE_DIR}/MouseActionManager.hpp
-  )
-else ()
-  target_sources(${APP_NAME}
-    PRIVATE
-      ${CMAKE_CURRENT_SOURCE_DIR}/LAppAllocator.cpp
-      ${CMAKE_CURRENT_SOURCE_DIR}/LAppAllocator.hpp
-      ${CMAKE_CURRENT_SOURCE_DIR}/LAppDefine.cpp
-      ${CMAKE_CURRENT_SOURCE_DIR}/LAppDefine.hpp
-      ${CMAKE_CURRENT_SOURCE_DIR}/LAppDelegate.cpp
-      ${CMAKE_CURRENT_SOURCE_DIR}/LAppDelegate.hpp
-      ${CMAKE_CURRENT_SOURCE_DIR}/LAppWavFileHandler.cpp
-      ${CMAKE_CURRENT_SOURCE_DIR}/LAppWavFileHandler.hpp
-      ${CMAKE_CURRENT_SOURCE_DIR}/LAppLive2DManager.cpp
-      ${CMAKE_CURRENT_SOURCE_DIR}/LAppLive2DManager.hpp
-      ${CMAKE_CURRENT_SOURCE_DIR}/LAppModel.cpp
-      ${CMAKE_CURRENT_SOURCE_DIR}/LAppModel.hpp
-      ${CMAKE_CURRENT_SOURCE_DIR}/LAppPal.cpp
-      ${CMAKE_CURRENT_SOURCE_DIR}/LAppPal.hpp
-      ${CMAKE_CURRENT_SOURCE_DIR}/LAppSprite.cpp
-      ${CMAKE_CURRENT_SOURCE_DIR}/LAppSprite.hpp
-      ${CMAKE_CURRENT_SOURCE_DIR}/LAppSpriteShader.cpp
-      ${CMAKE_CURRENT_SOURCE_DIR}/LAppSpriteShader.hpp
-      ${CMAKE_CURRENT_SOURCE_DIR}/LAppTextureManager.cpp
-      ${CMAKE_CURRENT_SOURCE_DIR}/LAppTextureManager.hpp
-      ${CMAKE_CURRENT_SOURCE_DIR}/LAppView.cpp
-      ${CMAKE_CURRENT_SOURCE_DIR}/LAppView.hpp
-      ${CMAKE_CURRENT_SOURCE_DIR}/main.cpp
-      ${CMAKE_CURRENT_SOURCE_DIR}/TouchManager.cpp
-      ${CMAKE_CURRENT_SOURCE_DIR}/TouchManager.hpp
-  )
-endif ()
+    ${CMAKE_CURRENT_SOURCE_DIR}/LAppView.cpp
+    ${CMAKE_CURRENT_SOURCE_DIR}/LAppView.hpp
+    ${CMAKE_CURRENT_SOURCE_DIR}/main.cpp
+)
diff -pruN --exclude build ./demo_clean/src/CubismUserModelExtend.cpp ./demo_dev/src/CubismUserModelExtend.cpp
--- ./demo_clean/src/CubismUserModelExtend.cpp	2025-02-14 07:18:07.000000000 +0000
+++ ./demo_dev/src/CubismUserModelExtend.cpp	2024-03-28 18:01:22.292448274 +0000
@@ -119,15 +119,12 @@ void CubismUserModelExtend::SetupModel()
             buffer = CreateBuffer(path.GetRawString(), &size);
             ACubismMotion* motion = LoadExpression(buffer, size, name.GetRawString());
 
-            if (motion)
+            if (_expressions[name])
             {
-                if (_expressions[name])
-                {
-                    ACubismMotion::Delete(_expressions[name]);
-                    _expressions[name] = nullptr;
-                }
-                _expressions[name] = motion;
+                ACubismMotion::Delete(_expressions[name]);
+                _expressions[name] = nullptr;
             }
+            _expressions[name] = motion;
 
             DeleteBuffer(buffer, path.GetRawString());
         }
@@ -211,17 +208,28 @@ void CubismUserModelExtend::PreloadMotio
         csmSizeInt size;
         buffer = CreateBuffer(path.GetRawString(), &size);
         // モーションデータの読み込み
-        CubismMotion* tmpMotion = static_cast<CubismMotion*>(LoadMotion(buffer, size, name.GetRawString(), NULL, NULL, _modelJson, group, i));
+        CubismMotion* tmpMotion = static_cast<CubismMotion*>(LoadMotion(buffer, size, name.GetRawString()));
 
-        if (tmpMotion)
+        // フェードインの時間を取得
+        csmFloat32 fadeTime = _modelJson->GetMotionFadeInTimeValue(group, i);
+        if (fadeTime >= 0.0f)
         {
-            if (_motions[name])
-            {
-                // インスタンスを破棄
-                ACubismMotion::Delete(_motions[name]);
-            }
-            _motions[name] = tmpMotion;
+            tmpMotion->SetFadeInTime(fadeTime);
+        }
+
+        // フェードアウトの時間を取得
+        fadeTime = _modelJson->GetMotionFadeOutTimeValue(group, i);
+        if (fadeTime >= 0.0f)
+        {
+            tmpMotion->SetFadeOutTime(fadeTime);
+        }
+
+        if (_motions[name])
+        {
+            // インスタンスを破棄
+            ACubismMotion::Delete(_motions[name]);
         }
+        _motions[name] = tmpMotion;
 
         DeleteBuffer(buffer, path.GetRawString());
     }
@@ -254,9 +262,10 @@ void CubismUserModelExtend::ReleaseModel
 * @param[in]   group                       モーショングループ名
 * @param[in]   no                          グループ内の番号
 * @param[in]   priority                    優先度
+* @param[in]   onFinishedMotionHandler     モーション再生終了時に呼び出されるコールバック関数。NULLの場合、呼び出されない。
 * @return                                  開始したモーションの識別番号を返す。個別のモーションが終了したか否かを判定するIsFinished()の引数で使用する。開始できない時は「-1」
 */
-Csm::CubismMotionQueueEntryHandle CubismUserModelExtend::StartMotion(const Csm::csmChar* group, Csm::csmInt32 no, Csm::csmInt32 priority)
+Csm::CubismMotionQueueEntryHandle CubismUserModelExtend::StartMotion(const Csm::csmChar* group, Csm::csmInt32 no, Csm::csmInt32 priority, Csm::ACubismMotion::FinishedMotionCallback onFinishedMotionHandler)
 {
     // モーション数が取得出来なかった、もしくは0の時
     if (!(_modelJson->GetMotionCount(group)))
@@ -292,16 +301,30 @@ Csm::CubismMotionQueueEntryHandle Cubism
         csmSizeInt size;
         buffer = CreateBuffer(path.GetRawString(), &size);
         // 一番先頭のモーションを読み込む
-        motion = static_cast<CubismMotion*>(LoadMotion(buffer, size, NULL, NULL, NULL, _modelJson, group, no));
+        motion = static_cast<CubismMotion*>(LoadMotion(buffer, size, NULL, onFinishedMotionHandler));
+
+        csmFloat32 fadeTime = _modelJson->GetMotionFadeInTimeValue(group, no);
+        if (fadeTime >= 0.0f)
+        {
+            motion->SetFadeInTime(fadeTime);
+        }
 
-        if (motion)
+        fadeTime = _modelJson->GetMotionFadeOutTimeValue(group, no);
+        if (fadeTime >= 0.0f)
         {
-            // 終了時にメモリから削除
-            autoDelete = true;
+            motion->SetFadeOutTime(fadeTime);
         }
 
+        // 終了時にメモリから削除
+        autoDelete = true;
+
         DeleteBuffer(buffer, path.GetRawString());
     }
+    else
+    {
+        // モーションの再生終了コールバックを登録
+        motion->SetFinishedMotionHandler(onFinishedMotionHandler);
+    }
 
     // 優先度を設定してモーションを始める
     return  _motionManager->StartMotionPriority(motion, autoDelete, priority);
diff -pruN --exclude build ./demo_clean/src/CubismUserModelExtend.hpp ./demo_dev/src/CubismUserModelExtend.hpp
--- ./demo_clean/src/CubismUserModelExtend.hpp	2025-02-14 07:18:07.000000000 +0000
+++ ./demo_dev/src/CubismUserModelExtend.hpp	2024-03-28 18:01:22.292448274 +0000
@@ -59,9 +59,10 @@ private:
     * @param[in] group                       モーショングループ名
     * @param[in] no                          グループ内の番号
     * @param[in] priority                    優先度
+    * @param[in] onFinishedMotionHandler     モーション再生終了時に呼び出されるコールバック関数。NULLの場合、呼び出されない。
     * @return 開始したモーションの識別番号を返す。個別のモーションが終了したか否かを判定するIsFinished()の引数で使用する。開始できない時は「-1」
     */
-    Csm::CubismMotionQueueEntryHandle StartMotion(const Csm::csmChar* group, Csm::csmInt32 no, Csm::csmInt32 priority);
+    Csm::CubismMotionQueueEntryHandle StartMotion(const Csm::csmChar* group, Csm::csmInt32 no, Csm::csmInt32 priority, Csm::ACubismMotion::FinishedMotionCallback onFinishedMotionHandler = NULL);
 
     /**
     * @brief 解放
diff -pruN --exclude build ./demo_clean/src/LAppDefine.cpp ./demo_dev/src/LAppDefine.cpp
--- ./demo_clean/src/LAppDefine.cpp	2025-02-14 07:18:07.000000000 +0000
+++ ./demo_dev/src/LAppDefine.cpp	2024-03-28 18:01:22.292448274 +0000
@@ -37,14 +37,19 @@ namespace LAppDefine {
     // 終了ボタン
     const csmChar* PowerImageName = "close.png";
 
-    // シェーダー相対パス
-    const csmChar* ShaderPath = "SampleShaders/";
-    // 頂点シェーダー
-    const csmChar* VertShaderName = "VertSprite.vert";
-    // フラグメントシェーダー
-    const csmChar* FragShaderName = "FragSprite.frag";
-
     // モデル定義------------------------------------------
+    // モデルを配置したディレクトリ名の配列
+    // ディレクトリ名とmodel3.jsonの名前を一致させておくこと
+    const csmChar* ModelDir[] = {
+        "Haru",
+        "Hiyori",
+        "Mark",
+        "Natori",
+        "Rice",
+        "Mao"
+    };
+    const csmInt32 ModelDirSize = sizeof(ModelDir) / sizeof(const csmChar*);
+
     // 外部定義ファイル(json)と合わせる
     const csmChar* MotionGroupIdle = "Idle"; // アイドリング
     const csmChar* MotionGroupTapBody = "TapBody"; // 体をタップしたとき
diff -pruN --exclude build ./demo_clean/src/LAppDefine.hpp ./demo_dev/src/LAppDefine.hpp
--- ./demo_clean/src/LAppDefine.hpp	2025-02-14 07:18:07.000000000 +0000
+++ ./demo_dev/src/LAppDefine.hpp	2024-03-28 18:01:22.292448274 +0000
@@ -36,11 +36,10 @@ namespace LAppDefine {
     extern const csmChar* GearImageName;         ///< 歯車画像ファイル
     extern const csmChar* PowerImageName;        ///< 終了ボタン画像ファイル
 
-    extern const csmChar* ShaderPath;               ///< シェーダーパス
-    extern const csmChar* VertShaderName;           ///< 頂点シェーダー
-    extern const csmChar* FragShaderName;           ///< フラグメントシェーダー
-
     // モデル定義--------------------------------------------
+    extern const csmChar* ModelDir[];               ///< モデルを配置したディレクトリ名の配列. ディレクトリ名とmodel3.jsonの名前を一致させておく.
+    extern const csmInt32 ModelDirSize;             ///< モデルディレクトリ配列のサイズ
+
                                                     // 外部定義ファイル(json)と合わせる
     extern const csmChar* MotionGroupIdle;          ///< アイドリング時に再生するモーションのリスト
     extern const csmChar* MotionGroupTapBody;       ///< 体をタップした時に再生するモーションのリスト
diff -pruN --exclude build ./demo_clean/src/LAppDelegate.cpp ./demo_dev/src/LAppDelegate.cpp
--- ./demo_clean/src/LAppDelegate.cpp	2025-02-14 07:18:07.000000000 +0000
+++ ./demo_dev/src/LAppDelegate.cpp	2024-03-28 18:01:22.296448336 +0000
@@ -9,7 +9,6 @@
 #include <iostream>
 #include <sstream>
 #include <unistd.h>
-#include <libgen.h>
 #include <GL/glew.h>
 #include <GLFW/glfw3.h>
 #include "LAppView.hpp"
@@ -46,11 +45,12 @@ void LAppDelegate::ReleaseInstance()
     s_instance = NULL;
 }
 
-bool LAppDelegate::Initialize()
+bool LAppDelegate::Initialize(int initWindowWidth, int initWindowHeight,
+                              const char *windowTitle)
 {
     if (DebugLogEnable)
     {
-        LAppPal::PrintLogLn("START");
+        LAppPal::PrintLog("START");
     }
 
     // GLFWの初期化
@@ -58,18 +58,24 @@ bool LAppDelegate::Initialize()
     {
         if (DebugLogEnable)
         {
-            LAppPal::PrintLogLn("Can't initilize GLFW");
+            LAppPal::PrintLog("Can't initilize GLFW");
         }
         return GL_FALSE;
     }
 
     // Windowの生成_
-    _window = glfwCreateWindow(RenderTargetWidth, RenderTargetHeight, "SAMPLE", NULL, NULL);
+    _window = glfwCreateWindow(
+        initWindowWidth ? initWindowWidth : RenderTargetWidth,
+        initWindowHeight ? initWindowHeight : RenderTargetHeight,
+        windowTitle ? windowTitle : "SAMPLE",
+        NULL,
+        NULL);
+
     if (_window == NULL)
     {
         if (DebugLogEnable)
         {
-            LAppPal::PrintLogLn("Can't create GLFW window.");
+            LAppPal::PrintLog("Can't create GLFW window.");
         }
         glfwTerminate();
         return GL_FALSE;
@@ -82,7 +88,7 @@ bool LAppDelegate::Initialize()
     if (glewInit() != GLEW_OK) {
         if (DebugLogEnable)
         {
-            LAppPal::PrintLogLn("Can't initilize glew.");
+            LAppPal::PrintLog("Can't initilize glew.");
         }
         glfwTerminate();
         return GL_FALSE;
@@ -96,27 +102,22 @@ bool LAppDelegate::Initialize()
     glEnable(GL_BLEND);
     glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
 
-    //コールバック関数の登録
-    glfwSetMouseButtonCallback(_window, EventHandler::OnMouseCallBack);
-    glfwSetCursorPosCallback(_window, EventHandler::OnMouseCallBack);
-
     // ウィンドウサイズ記憶
     int width, height;
     glfwGetWindowSize(LAppDelegate::GetInstance()->GetWindow(), &width, &height);
     _windowWidth = width;
     _windowHeight = height;
-    glViewport(0, 0, _windowWidth, _windowHeight);
+
+    //AppViewの初期化
+    _view->Initialize();
 
     // Cubism3の初期化
     InitializeCubism();
 
-    SetExecuteAbsolutePath();
-
     //load model
     LAppLive2DManager::GetInstance();
 
-    //AppViewの初期化
-    _view->Initialize();
+    //load sprite
     _view->InitializeSprite();
 
     return GL_TRUE;
@@ -154,7 +155,6 @@ void LAppDelegate::Run()
             _windowWidth = width;
             _windowHeight = height;
         }
-        glViewport(0, 0, _windowWidth, _windowHeight);
 
         // 時間更新
         LAppPal::UpdateTime();
@@ -189,7 +189,7 @@ LAppDelegate::LAppDelegate():
     _windowWidth(0),
     _windowHeight(0)
 {
-    _executeAbsolutePath = "";
+    _rootDirectory = "";
     _view = new LAppView();
     _textureManager = new LAppTextureManager();
 }
@@ -215,59 +215,66 @@ void LAppDelegate::InitializeCubism()
     LAppPal::UpdateTime();
 }
 
-void LAppDelegate::OnMouseCallBack(GLFWwindow* window, int button, int action, int modify)
+GLuint LAppDelegate::CreateShader()
 {
-    if (_view == NULL)
-    {
-        return;
-    }
-    if (GLFW_MOUSE_BUTTON_LEFT != button)
-    {
-        return;
-    }
+    //バーテックスシェーダのコンパイル
+    GLuint vertexShaderId = glCreateShader(GL_VERTEX_SHADER);
+    const char* vertexShader =
+        "#version 120\n"
+        "attribute vec3 position;"
+        "attribute vec2 uv;"
+        "varying vec2 vuv;"
+        "void main(void){"
+        "    gl_Position = vec4(position, 1.0);"
+        "    vuv = uv;"
+        "}";
+    glShaderSource(vertexShaderId, 1, &vertexShader, NULL);
+    glCompileShader(vertexShaderId);
+
+    //フラグメントシェーダのコンパイル
+    GLuint fragmentShaderId = glCreateShader(GL_FRAGMENT_SHADER);
+    const char* fragmentShader =
+        "#version 120\n"
+        "varying vec2 vuv;"
+        "uniform sampler2D texture;"
+        "uniform vec4 baseColor;"
+        "void main(void){"
+        "    gl_FragColor = texture2D(texture, vuv) * baseColor;"
+        "}";
+    glShaderSource(fragmentShaderId, 1, &fragmentShader, NULL);
+    glCompileShader(fragmentShaderId);
+
+    //プログラムオブジェクトの作成
+    GLuint programId = glCreateProgram();
+    glAttachShader(programId, vertexShaderId);
+    glAttachShader(programId, fragmentShaderId);
+
+    // リンク
+    glLinkProgram(programId);
+
+    glUseProgram(programId);
+
+    return programId;
+}
+
+void LAppDelegate::SetRootDirectory(std::string rootDir)
+{
+    this->_rootDirectory = rootDir + "/";
+}
+
+Csm::csmVector<string> LAppDelegate::Split(const std::string& baseString, char delimiter)
+{
+    Csm::csmVector<string> elems;
+    stringstream ss(baseString);
+    string item;
 
-    if (GLFW_PRESS == action)
+    while(getline(ss, item, delimiter))
     {
-        _captured = true;
-        _view->OnTouchesBegan(_mouseX, _mouseY);
-    }
-    else if (GLFW_RELEASE == action)
-    {
-        if (_captured)
+        if(!item.empty())
         {
-            _captured = false;
-            _view->OnTouchesEnded(_mouseX, _mouseY);
+            elems.PushBack(item);
         }
     }
-}
-
-void LAppDelegate::OnMouseCallBack(GLFWwindow* window, double x, double y)
-{
-    _mouseX = static_cast<float>(x);
-    _mouseY = static_cast<float>(y);
-
-    if (!_captured)
-    {
-        return;
-    }
-    if (_view == NULL)
-    {
-        return;
-    }
-
-    _view->OnTouchesMoved(_mouseX, _mouseY);
-}
-
-void LAppDelegate::SetExecuteAbsolutePath()
-{
-    char path[1024];
-    ssize_t len = readlink("/proc/self/exe", path, 1024 - 1);
-
-    if (len != -1)
-    {
-        path[len] = '\0';
-    }
 
-    this->_executeAbsolutePath = dirname(path);
-    this->_executeAbsolutePath += "/";
+    return elems;
 }
diff -pruN --exclude build ./demo_clean/src/LAppDelegate.hpp ./demo_dev/src/LAppDelegate.hpp
--- ./demo_clean/src/LAppDelegate.hpp	2025-02-14 07:18:07.000000000 +0000
+++ ./demo_dev/src/LAppDelegate.hpp	2024-03-28 18:01:22.296448336 +0000
@@ -40,7 +40,8 @@ public:
     /**
     * @brief   APPに必要なものを初期化する。
     */
-    bool Initialize();
+    bool Initialize(int initWindowWidth = 0, int initWindowHeight = 0,
+                    const char *windowTitle = "SAMPLE");
 
     /**
     * @brief   解放する。
@@ -53,23 +54,9 @@ public:
     void Run();
 
     /**
-    * @brief   OpenGL用 glfwSetMouseButtonCallback用関数。
-    *
-    * @param[in]       window            コールバックを呼んだWindow情報
-    * @param[in]       button            ボタン種類
-    * @param[in]       action            実行結果
-    * @param[in]       modify
-    */
-    void OnMouseCallBack(GLFWwindow* window, int button, int action, int modify);
-
-    /**
-    * @brief   OpenGL用 glfwSetCursorPosCallback用関数。
-    *
-    * @param[in]       window            コールバックを呼んだWindow情報
-    * @param[in]       x                 x座標
-    * @param[in]       y                 x座標
+    * @brief シェーダーを登録する。
     */
-    void OnMouseCallBack(GLFWwindow* window, double x, double y);
+    GLuint CreateShader();
 
     /**
     * @brief   Window情報を取得する。
@@ -92,14 +79,16 @@ public:
     void AppEnd() { _isEnd = true; }
 
     /**
-     * @brief   アプリケーションの実行パスを設定する。
+     * @brief   ルートディレクトリを設定する。
+     *
+     * @param[in] rootDir : The root directory to set to.
      */
-    void SetExecuteAbsolutePath();
+    void SetRootDirectory(std::string rootDir);
 
     /**
-     * @brief   アプリケーションの実行パスを取得する。
+     * @brief   ルートディレクトリを取得する。
      */
-    std::string GetExecuteAbsolutePath(){ return _executeAbsolutePath;}
+    std::string GetRootDirectory(){ return _rootDirectory;}
 
     /**
      * @brief   テクスチャマネージャーを取得する。
@@ -122,6 +111,11 @@ private:
     */
     void InitializeCubism();
 
+    /**
+     * @brief   文字列を指定の文字で切り分ける
+     */
+    Csm::csmVector<std::string> Split(const std::string& baseString, char delim);
+
     LAppAllocator _cubismAllocator;              ///< Cubism3 Allocator
     Csm::CubismFramework::Option _cubismOption;  ///< Cubism3 Option
     GLFWwindow* _window;                         ///< OpenGL ウィンドウ
@@ -131,29 +125,8 @@ private:
     float _mouseY;                               ///< マウスY座標
     bool _isEnd;                                 ///< APP終了しているか
     LAppTextureManager* _textureManager;         ///< テクスチャマネージャー
-    std::string _executeAbsolutePath;            ///< アプリケーションの実行パス
+    std::string _rootDirectory; ///< ルートディレクトリ
 
     int _windowWidth;                            ///< Initialize関数で設定したウィンドウ幅
     int _windowHeight;                           ///< Initialize関数で設定したウィンドウ高さ
 };
-
-class EventHandler
-{
-public:
-    /**
-    * @brief   glfwSetMouseButtonCallback用コールバック関数。
-    */
-    static void OnMouseCallBack(GLFWwindow* window, int button, int action, int modify)
-    {
-        LAppDelegate::GetInstance()->OnMouseCallBack(window, button, action, modify);
-    }
-
-    /**
-    * @brief   glfwSetCursorPosCallback用コールバック関数。
-    */
-    static void OnMouseCallBack(GLFWwindow* window, double x, double y)
-    {
-         LAppDelegate::GetInstance()->OnMouseCallBack(window, x, y);
-    }
-
-};
diff -pruN --exclude build ./demo_clean/src/LAppLive2DManager.cpp ./demo_dev/src/LAppLive2DManager.cpp
--- ./demo_clean/src/LAppLive2DManager.cpp	2025-02-14 07:18:07.000000000 +0000
+++ ./demo_dev/src/LAppLive2DManager.cpp	2024-03-28 18:01:22.296448336 +0000
@@ -6,13 +6,7 @@
  */
 
 #include "LAppLive2DManager.hpp"
-#include <stdio.h>
-#include <stdlib.h>
-#include <string.h>
-#include <dirent.h>
-#include <unistd.h>
-#include <libgen.h>
-#include <limits.h>
+#include <string>
 #include <GL/glew.h>
 #include <GLFW/glfw3.h>
 #include <Rendering/CubismRenderer.hpp>
@@ -25,24 +19,14 @@
 
 using namespace Csm;
 using namespace LAppDefine;
+using namespace std;
 
 namespace {
     LAppLive2DManager* s_instance = NULL;
 
-    void BeganMotion(ACubismMotion* self)
-    {
-        LAppPal::PrintLogLn("Motion began: %x", self);
-    }
-
     void FinishedMotion(ACubismMotion* self)
     {
-        LAppPal::PrintLogLn("Motion Finished: %x", self);
-    }
-
-    int CompareCsmString(const void* a, const void* b)
-    {
-        return strcmp(reinterpret_cast<const Csm::csmString*>(a)->GetRawString(),
-            reinterpret_cast<const Csm::csmString*>(b)->GetRawString());
+        LAppPal::PrintLog("Motion Finished: %x", self);
     }
 }
 
@@ -68,18 +52,16 @@ void LAppLive2DManager::ReleaseInstance(
 
 LAppLive2DManager::LAppLive2DManager()
     : _viewMatrix(NULL)
-    , _sceneIndex(0)
+    , _projScaleFactor(1.0f)
+    , _translateX(0.0f)
+    , _translateY(0.0f)
 {
     _viewMatrix = new CubismMatrix44();
-    SetUpModel();
-
-    ChangeScene(_sceneIndex);
 }
 
 LAppLive2DManager::~LAppLive2DManager()
 {
     ReleaseAllModel();
-    delete _viewMatrix;
 }
 
 void LAppLive2DManager::ReleaseAllModel()
@@ -92,60 +74,6 @@ void LAppLive2DManager::ReleaseAllModel(
     _models.Clear();
 }
 
-void LAppLive2DManager::SetUpModel()
-{
-    // ResourcesPathの中にあるフォルダ名を全てクロールし、モデルが存在するフォルダを定義する。
-    // フォルダはあるが同名の.model3.jsonが見つからなかった場合はリストに含めない。
-    struct dirent *dirent;
-    csmString crawlPath(LAppDelegate::GetInstance()->GetExecuteAbsolutePath().c_str());
-    crawlPath += ResourcesPath;
-
-    DIR *pDir = opendir(crawlPath.GetRawString());
-    if (pDir == NULL) return;
-
-    _modelDir.Clear();
-
-    while ((dirent = readdir(pDir)) != NULL)
-    {
-        if ((dirent->d_type & DT_DIR) && strcmp(dirent->d_name, "..") != 0)
-        {
-            // フォルダと同名の.model3.jsonがあるか探索する
-            struct dirent *dirent2;
-
-            csmString modelName(dirent->d_name);
-
-            csmString modelPath(crawlPath);
-            modelPath += modelName;
-            modelPath.Append(1, '/');
-
-            csmString model3jsonName(modelName);
-            model3jsonName += ".model3.json";
-
-            DIR *pDir2 = opendir(modelPath.GetRawString());
-            while ((dirent2 = readdir(pDir2)) != NULL)
-            {
-                if (strcmp(dirent2->d_name, model3jsonName.GetRawString()) == 0)
-                {
-                    _modelDir.PushBack(csmString(dirent->d_name));
-                }
-            }
-            closedir(pDir2);
-        }
-    }
-    closedir(pDir);
-    qsort(_modelDir.GetPtr(), _modelDir.GetSize(), sizeof(csmString), CompareCsmString);
-}
-
-csmVector<csmString> LAppLive2DManager::GetModelDir() const
-{
-    return _modelDir;
-}
-
-csmInt32 LAppLive2DManager::GetModelDirSize() const
-{
-    return _modelDir.GetSize();
-}
-
 LAppModel* LAppLive2DManager::GetModel(csmUint32 no) const
 {
     if (no < _models.GetSize())
@@ -170,27 +98,7 @@ void LAppLive2DManager::OnTap(csmFloat32
 {
     if (DebugLogEnable)
     {
-        LAppPal::PrintLogLn("[APP]tap point: {x:%.2f y:%.2f}", x, y);
-    }
-
-    for (csmUint32 i = 0; i < _models.GetSize(); i++)
-    {
-        if (_models[i]->HitTest(HitAreaNameHead, x, y))
-        {
-            if (DebugLogEnable)
-            {
-                LAppPal::PrintLogLn("[APP]hit area: [%s]", HitAreaNameHead);
-            }
-            _models[i]->SetRandomExpression();
-        }
-        else if (_models[i]->HitTest(HitAreaNameBody, x, y))
-        {
-            if (DebugLogEnable)
-            {
-                LAppPal::PrintLogLn("[APP]hit area: [%s]", HitAreaNameBody);
-            }
-            _models[i]->StartRandomMotion(MotionGroupTapBody, PriorityNormal, FinishedMotion, BeganMotion);
-        }
+        LAppPal::PrintLog("[APP]tap point: {x:%.2f y:%.2f}", x, y);
     }
 }
 
@@ -199,15 +107,15 @@ void LAppLive2DManager::OnUpdate() const
     int width, height;
     glfwGetWindowSize(LAppDelegate::GetInstance()->GetWindow(), &width, &height);
 
+    CubismMatrix44 projection;
     csmUint32 modelCount = _models.GetSize();
     for (csmUint32 i = 0; i < modelCount; ++i)
     {
-        CubismMatrix44 projection;
         LAppModel* model = GetModel(i);
 
         if (model->GetModel() == NULL)
         {
-            LAppPal::PrintLogLn("Failed to model->GetModel().");
+            LAppPal::PrintLog("Failed to model->GetModel().");
             continue;
         }
 
@@ -215,12 +123,15 @@ void LAppLive2DManager::OnUpdate() const
         {
             // 横に長いモデルを縦長ウィンドウに表示する際モデルの横サイズでscaleを算出する
             model->GetModelMatrix()->SetWidth(2.0f);
-            projection.Scale(1.0f, static_cast<float>(width) / static_cast<float>(height));
+            projection.Scale(_projScaleFactor,
+                             _projScaleFactor * static_cast<float>(width) / static_cast<float>(height));
         }
         else
         {
-            projection.Scale(static_cast<float>(height) / static_cast<float>(width), 1.0f);
+            projection.Scale(_projScaleFactor * static_cast<float>(height) / static_cast<float>(width),
+                             _projScaleFactor);
         }
+        projection.Translate(_translateX, _translateY);
 
         // 必要があればここで乗算
         if (_viewMatrix != NULL)
@@ -237,37 +148,15 @@ void LAppLive2DManager::OnUpdate() const
     }
 }
 
-void LAppLive2DManager::NextScene()
-{
-    csmInt32 no = (_sceneIndex + 1) % GetModelDirSize();
-    ChangeScene(no);
-}
-
-void LAppLive2DManager::ChangeScene(Csm::csmInt32 index)
+void LAppLive2DManager::SetModel(std::string modelName, bool useOldParamId)
 {
-    _sceneIndex = index;
-    if (DebugLogEnable)
-    {
-        LAppPal::PrintLogLn("[APP]model index: %d", _sceneIndex);
-    }
-
-    // ModelDir[]に保持したディレクトリ名から
-    // model3.jsonのパスを決定する.
-    // ディレクトリ名とmodel3.jsonの名前を一致させておくこと.
-    const csmString& model = _modelDir[index];
-    LAppPal::PrintLogLn("[APP]_modelDir: %s", model.GetRawString());
-
-    csmString modelPath(LAppDelegate::GetInstance()->GetExecuteAbsolutePath().c_str());
-    modelPath += ResourcesPath;
-    modelPath += model;
-    modelPath.Append(1, '/');
-
-    csmString modelJsonName(model);
+    std::string modelPath = LAppDelegate::GetInstance()->GetRootDirectory() + ResourcesPath + modelName + "/";
+    std::string modelJsonName = modelName;
     modelJsonName += ".model3.json";
 
     ReleaseAllModel();
-    _models.PushBack(new LAppModel());
-    _models[0]->LoadAssets(modelPath.GetRawString(), modelJsonName.GetRawString());
+    _models.PushBack(new LAppModel(useOldParamId));
+    _models[0]->LoadAssets(modelPath.c_str(), modelJsonName.c_str());
 
     /*
      * モデル半透明表示を行うサンプルを提示する。
@@ -288,12 +177,12 @@ void LAppLive2DManager::ChangeScene(Csm:
 
 #if defined(USE_RENDER_TARGET) || defined(USE_MODEL_RENDER_TARGET)
         // モデル個別にαを付けるサンプルとして、もう1体モデルを作成し、少し位置をずらす
-        _models.PushBack(new LAppModel());
-        _models[1]->LoadAssets(modelPath.GetRawString(), modelJsonName.GetRawString());
+        _models.PushBack(new LAppModel(useOldParamId));
+        _models[1]->LoadAssets(modelPath.c_str(), modelJsonName.c_str());
         _models[1]->GetModelMatrix()->TranslateX(0.2f);
 #endif
 
-        float clearColor[3] = { 0.0f, 0.0f, 0.0f };
+        float clearColor[3] = { 1.0f, 1.0f, 1.0f };
 
         LAppDelegate::GetInstance()->GetView()->SwitchRenderingTarget(useRenderTarget);
 
@@ -317,3 +206,20 @@ void LAppLive2DManager::SetViewMatrix(Cu
         _viewMatrix->GetArray()[i] = m->GetArray()[i];
     }
 }
+
+void LAppLive2DManager::SetFacialLandmarkDetector(FacialLandmarkDetector *detector)
+{
+    for (auto it = _models.Begin(); it != _models.End(); ++it)
+    {
+        (*it)->SetFacialLandmarkDetector(detector);
+    }
+}
+
+void LAppLive2DManager::SetProjectionScaleTranslate(float scaleFactor,
+                                                    float translateX,
+                                                    float translateY)
+{
+    _projScaleFactor = scaleFactor;
+    _translateX = translateX;
+    _translateY = translateY;
+}
diff -pruN --exclude build ./demo_clean/src/LAppLive2DManager.hpp ./demo_dev/src/LAppLive2DManager.hpp
--- ./demo_clean/src/LAppLive2DManager.hpp	2025-02-14 07:18:07.000000000 +0000
+++ ./demo_dev/src/LAppLive2DManager.hpp	2024-03-28 18:01:22.296448336 +0000
@@ -6,12 +6,15 @@
  */
 #pragma once
 
+#include <string>
 #include <CubismFramework.hpp>
 #include <Math/CubismMatrix44.hpp>
 #include <Type/csmVector.hpp>
 
 class LAppModel;
 
+class FacialLandmarkDetector;
+
 /**
 * @brief サンプルアプリケーションにおいてCubismModelを管理するクラス<br>
 *         モデル生成と破棄、タップイベントの処理、モデル切り替えを行う。
@@ -36,24 +39,6 @@ public:
     static void ReleaseInstance();
 
     /**
-    * @brief   Resources フォルダにあるモデルフォルダ名をセットする
-    *
-    */
-    void SetUpModel();
-
-    /**
-    * @brief   Resources フォルダにあるモデルフォルダ名を取得する
-    *
-    */
-    Csm::csmVector<Csm::csmString> GetModelDir() const;
-
-    /**
-    * @brief   Resources フォルダにあるモデルフォルダのサイズを取得する
-    *
-    */
-    Csm::csmInt32 GetModelDirSize() const;
-
-    /**
     * @brief   現在のシーンで保持しているモデルを返す
     *
     * @param[in]   no  モデルリストのインデックス値
@@ -90,16 +75,14 @@ public:
     void OnUpdate() const;
 
     /**
-    * @brief   次のシーンに切り替える<br>
-    *           サンプルアプリケーションではモデルセットの切り替えを行う。
-    */
-    void NextScene();
-
-    /**
-    * @brief   シーンを切り替える<br>
-    *           サンプルアプリケーションではモデルセットの切り替えを行う。
-    */
-    void ChangeScene(Csm::csmInt32 index);
+     * @brief Set model data
+     *
+     * @param[in] modelName : Name of model, should be the same for both
+     *                        the directory and the model3.json file
+     * @param[in] useOldParamId : If true, translate new (Cubism 3+)
+     *                            parameter IDs to old (Cubism 2.1) ones
+     */
+    void SetModel(std::string modelName, bool useOldParamId);
 
     /**
      * @brief   モデル個数を得る
@@ -112,6 +95,24 @@ public:
      */
     void SetViewMatrix(Live2D::Cubism::Framework::CubismMatrix44* m);
 
+    /**
+     * @brief Set the pointer to the FacialLandmarkDetector instance
+     *
+     * @param[in] detector : Pointer to FacialLandmarkDetector instance
+     */
+    void SetFacialLandmarkDetector(FacialLandmarkDetector *detector);
+
+    /**
+     * @brief Set projection scale factor and translation parameters
+     *
+     * @param[in] scaleFactor : Scale factor applied in both X and Y directions
+     * @param[in] translateX : Translation in X direction
+     * @param[in] translateY : Translation in Y direction
+     */
+    void SetProjectionScaleTranslate(float scaleFactor,
+                                     float translateX,
+                                     float translateY);
+
 private:
     /**
     * @brief  コンストラクタ
@@ -123,9 +124,10 @@ private:
     */
     virtual ~LAppLive2DManager();
 
-    Csm::CubismMatrix44* _viewMatrix; ///< モデル描画に用いるView行列
-    Csm::csmVector<LAppModel*> _models; ///< モデルインスタンスのコンテナ
-    Csm::csmInt32 _sceneIndex; ///< 表示するシーンのインデックス値
+    Csm::CubismMatrix44*        _viewMatrix; ///< モデル描画に用いるView行列
+    Csm::csmVector<LAppModel*>  _models; ///< モデルインスタンスのコンテナ
 
-    Csm::csmVector<Csm::csmString> _modelDir; ///< モデルディレクトリ名のコンテナ
+    float _projScaleFactor;
+    float _translateX;
+    float _translateY;
 };
diff -pruN --exclude build ./demo_clean/src/LAppModel.cpp ./demo_dev/src/LAppModel.cpp
--- ./demo_clean/src/LAppModel.cpp	2025-02-14 07:18:07.000000000 +0000
+++ ./demo_dev/src/LAppModel.cpp	2024-03-28 18:02:11.761218047 +0000
@@ -21,6 +21,8 @@
 #include "LAppTextureManager.hpp"
 #include "LAppDelegate.hpp"
 
+#include "facial_landmark_detector.h"
+
 using namespace Live2D::Cubism::Framework;
 using namespace Live2D::Cubism::Framework::DefaultParameterId;
 using namespace LAppDefine;
@@ -30,7 +32,7 @@ namespace {
     {
         if (DebugLogEnable)
         {
-            LAppPal::PrintLogLn("[APP]create buffer: %s ", path);
+            LAppPal::PrintLog("[APP]create buffer: %s ", path);
         }
         return LAppPal::LoadFileAsBytes(path, size);
     }
@@ -39,28 +41,30 @@ namespace {
     {
         if (DebugLogEnable)
         {
-            LAppPal::PrintLogLn("[APP]delete buffer: %s", path);
+            LAppPal::PrintLog("[APP]delete buffer: %s", path);
         }
         LAppPal::ReleaseBytes(buffer);
     }
 }
 
-LAppModel::LAppModel()
+LAppModel::LAppModel(bool useOldParamId)
     : CubismUserModel()
     , _modelSetting(NULL)
     , _userTimeSeconds(0.0f)
+    , _detector(nullptr)
+    , _useOldParamId(useOldParamId)
 {
     if (DebugLogEnable)
     {
         _debugMode = true;
     }
 
-    _idParamAngleX = CubismFramework::GetIdManager()->GetId(ParamAngleX);
-    _idParamAngleY = CubismFramework::GetIdManager()->GetId(ParamAngleY);
-    _idParamAngleZ = CubismFramework::GetIdManager()->GetId(ParamAngleZ);
-    _idParamBodyAngleX = CubismFramework::GetIdManager()->GetId(ParamBodyAngleX);
-    _idParamEyeBallX = CubismFramework::GetIdManager()->GetId(ParamEyeBallX);
-    _idParamEyeBallY = CubismFramework::GetIdManager()->GetId(ParamEyeBallY);
+    _idParamAngleX = CubismFramework::GetIdManager()->GetId(_(ParamAngleX));
+    _idParamAngleY = CubismFramework::GetIdManager()->GetId(_(ParamAngleY));
+    _idParamAngleZ = CubismFramework::GetIdManager()->GetId(_(ParamAngleZ));
+    _idParamBodyAngleX = CubismFramework::GetIdManager()->GetId(_(ParamBodyAngleX));
+    _idParamEyeBallX = CubismFramework::GetIdManager()->GetId(_(ParamEyeBallX));
+    _idParamEyeBallY = CubismFramework::GetIdManager()->GetId(_(ParamEyeBallY));
 }
 
 LAppModel::~LAppModel()
@@ -84,7 +88,7 @@ void LAppModel::LoadAssets(const csmChar
 
     if (_debugMode)
     {
-        LAppPal::PrintLogLn("[APP]load model setting: %s", fileName);
+        LAppPal::PrintLog("[APP]load model setting: %s", fileName);
     }
 
     csmSizeInt size;
@@ -96,12 +100,6 @@ void LAppModel::LoadAssets(const csmChar
 
     SetupModel(setting);
 
-    if (_model == NULL)
-    {
-        LAppPal::PrintLogLn("Failed to LoadAssets().");
-        return;
-    }
-
     CreateRenderer();
 
     SetupTextures();
@@ -126,7 +124,7 @@ void LAppModel::SetupModel(ICubismModelS
 
         if (_debugMode)
         {
-            LAppPal::PrintLogLn("[APP]create model: %s", setting->GetModelFileName());
+            LAppPal::PrintLog("[APP]create model: %s", setting->GetModelFileName());
         }
 
         buffer = CreateBuffer(path.GetRawString(), &size);
@@ -134,33 +132,6 @@ void LAppModel::SetupModel(ICubismModelS
         DeleteBuffer(buffer, path.GetRawString());
     }
 
-    //Expression
-    if (_modelSetting->GetExpressionCount() > 0)
-    {
-        const csmInt32 count = _modelSetting->GetExpressionCount();
-        for (csmInt32 i = 0; i < count; i++)
-        {
-            csmString name = _modelSetting->GetExpressionName(i);
-            csmString path = _modelSetting->GetExpressionFileName(i);
-            path = _modelHomeDir + path;
-
-            buffer = CreateBuffer(path.GetRawString(), &size);
-            ACubismMotion* motion = LoadExpression(buffer, size, name.GetRawString());
-
-            if (motion)
-            {
-                if (_expressions[name] != NULL)
-                {
-                    ACubismMotion::Delete(_expressions[name]);
-                    _expressions[name] = NULL;
-                }
-                _expressions[name] = motion;
-            }
-
-            DeleteBuffer(buffer, path.GetRawString());
-        }
-    }
-
     //Physics
     if (strcmp(_modelSetting->GetPhysicsFileName(), "") != 0)
     {
@@ -199,7 +170,7 @@ void LAppModel::SetupModel(ICubismModelS
         breathParameters.PushBack(CubismBreath::BreathParameterData(_idParamAngleY, 0.0f, 8.0f, 3.5345f, 0.5f));
         breathParameters.PushBack(CubismBreath::BreathParameterData(_idParamAngleZ, 0.0f, 10.0f, 5.5345f, 0.5f));
         breathParameters.PushBack(CubismBreath::BreathParameterData(_idParamBodyAngleX, 0.0f, 4.0f, 15.5345f, 0.5f));
-        breathParameters.PushBack(CubismBreath::BreathParameterData(CubismFramework::GetIdManager()->GetId(ParamBreath), 0.5f, 0.5f, 3.2345f, 0.5f));
+        breathParameters.PushBack(CubismBreath::BreathParameterData(CubismFramework::GetIdManager()->GetId(_(ParamBreath)), 0.5f, 0.5f, 3.2345f, 0.5f));
 
         _breath->SetParameters(breathParameters);
     }
@@ -223,21 +194,6 @@ void LAppModel::SetupModel(ICubismModelS
         }
     }
 
-    // LipSyncIds
-    {
-        csmInt32 lipSyncIdCount = _modelSetting->GetLipSyncParameterCount();
-        for (csmInt32 i = 0; i < lipSyncIdCount; ++i)
-        {
-            _lipSyncIds.PushBack(_modelSetting->GetLipSyncParameterId(i));
-        }
-    }
-
-    if (_modelSetting == NULL || _modelMatrix == NULL)
-    {
-        LAppPal::PrintLogLn("Failed to SetupModel().");
-        return;
-    }
-
     //Layout
     csmMap<csmString, csmFloat32> layout;
     _modelSetting->GetLayoutMap(layout);
@@ -270,24 +226,32 @@ void LAppModel::PreloadMotionGroup(const
 
         if (_debugMode)
         {
-            LAppPal::PrintLogLn("[APP]load motion: %s => [%s_%d] ", path.GetRawString(), group, i);
+            LAppPal::PrintLog("[APP]load motion: %s => [%s_%d] ", path.GetRawString(), group, i);
         }
 
         csmByte* buffer;
         csmSizeInt size;
         buffer = CreateBuffer(path.GetRawString(), &size);
-        CubismMotion* tmpMotion = static_cast<CubismMotion*>(LoadMotion(buffer, size, name.GetRawString(), NULL, NULL, _modelSetting, group, i));
+        CubismMotion* tmpMotion = static_cast<CubismMotion*>(LoadMotion(buffer, size, name.GetRawString()));
 
-        if (tmpMotion)
+        csmFloat32 fadeTime = _modelSetting->GetMotionFadeInTimeValue(group, i);
+        if (fadeTime >= 0.0f)
         {
-            tmpMotion->SetEffectIds(_eyeBlinkIds, _lipSyncIds);
+            tmpMotion->SetFadeInTime(fadeTime);
+        }
 
-            if (_motions[name] != NULL)
-            {
-                ACubismMotion::Delete(_motions[name]);
-            }
-            _motions[name] = tmpMotion;
+        fadeTime = _modelSetting->GetMotionFadeOutTimeValue(group, i);
+        if (fadeTime >= 0.0f)
+        {
+            tmpMotion->SetFadeOutTime(fadeTime);
         }
+        tmpMotion->SetEffectIds(_eyeBlinkIds, _lipSyncIds);
+
+        if (_motions[name] != NULL)
+        {
+            ACubismMotion::Delete(_motions[name]);
+        }
+        _motions[name] = tmpMotion;
 
         DeleteBuffer(buffer, path.GetRawString());
     }
@@ -342,62 +306,57 @@ void LAppModel::Update()
     const csmFloat32 deltaTimeSeconds = LAppPal::GetDeltaTime();
     _userTimeSeconds += deltaTimeSeconds;
 
-    _dragManager->Update(deltaTimeSeconds);
-    _dragX = _dragManager->GetX();
-    _dragY = _dragManager->GetY();
-
-    // モーションによるパラメータ更新の有無
-    csmBool motionUpdated = false;
-
-    //-----------------------------------------------------------------
-    _model->LoadParameters(); // 前回セーブされた状態をロード
-    if (_motionManager->IsFinished())
-    {
-        // モーションの再生がない場合、待機モーションの中からランダムで再生する
-        StartRandomMotion(MotionGroupIdle, PriorityIdle);
-    }
-    else
+    if (_detector)
     {
-        motionUpdated = _motionManager->UpdateMotion(_model, deltaTimeSeconds); // モーションを更新
-    }
-    _model->SaveParameters(); // 状態を保存
-    //-----------------------------------------------------------------
-
-    // 不透明度
-    _opacity = _model->GetModelOpacity();
+        auto idMan = CubismFramework::GetIdManager();
+        auto params = _detector->getParams();
 
-    // まばたき
-    if (!motionUpdated)
-    {
-        if (_eyeBlink != NULL)
+        // NOTE: Apparently, this LoadParameters/SaveParameters pair
+        // is needed for auto breath to work.
+        _model->LoadParameters(); // 前回セーブされた状態をロード
+        if (_motionManager->IsFinished() && params.randomMotion)
         {
-            // メインモーションの更新がないとき
-            _eyeBlink->UpdateParameters(_model, deltaTimeSeconds); // 目パチ
+            // モーションの再生がない場合、待機モーションの中からランダムで再生する
+            StartRandomMotion(MotionGroupIdle, PriorityIdle);
         }
-    }
-
-    if (_expressionManager != NULL)
-    {
-        _expressionManager->UpdateMotion(_model, deltaTimeSeconds); // 表情でパラメータ更新（相対変化）
-    }
-
-    //ドラッグによる変化
-    //ドラッグによる顔の向きの調整
-    _model->AddParameterValue(_idParamAngleX, _dragX * 30); // -30から30の値を加える
-    _model->AddParameterValue(_idParamAngleY, _dragY * 30);
-    _model->AddParameterValue(_idParamAngleZ, _dragX * _dragY * -30);
-
-    //ドラッグによる体の向きの調整
-    _model->AddParameterValue(_idParamBodyAngleX, _dragX * 10); // -10から10の値を加える
+        else
+        {
+            _motionManager->UpdateMotion(_model, deltaTimeSeconds); // モーションを更新
+        }
+        _model->SaveParameters(); // 状態を保存
 
-    //ドラッグによる目の向きの調整
-    _model->AddParameterValue(_idParamEyeBallX, _dragX); // -1から1の値を加える
-    _model->AddParameterValue(_idParamEyeBallY, _dragY);
 
-    // 呼吸など
-    if (_breath != NULL)
-    {
-        _breath->UpdateParameters(_model, deltaTimeSeconds);
+        if (params.autoBlink && _eyeBlink)
+        {
+            _eyeBlink->UpdateParameters(_model, deltaTimeSeconds);
+        }
+        else
+        {
+            _model->SetParameterValue(idMan->GetId(_("ParamEyeLOpen")),
+                                      params.leftEyeOpenness);
+            _model->SetParameterValue(idMan->GetId(_("ParamEyeROpen")),
+                                      params.rightEyeOpenness);
+        }
+        _model->SetParameterValue(idMan->GetId(_("ParamMouthForm")),
+                                  params.mouthForm);
+        _model->SetParameterValue(idMan->GetId(_("ParamMouthOpenY")),
+                                  params.mouthOpenness);
+        _model->SetParameterValue(idMan->GetId(_("ParamEyeLSmile")),
+                                  params.leftEyeSmile);
+        _model->SetParameterValue(idMan->GetId(_("ParamEyeRSmile")),
+                                  params.rightEyeSmile);
+        _model->SetParameterValue(idMan->GetId(_("ParamAngleX")),
+                                  params.faceXAngle);
+        _model->SetParameterValue(idMan->GetId(_("ParamAngleY")),
+                                  params.faceYAngle);
+        _model->SetParameterValue(idMan->GetId(_("ParamAngleZ")),
+                                  params.faceZAngle);
+        if (params.autoBreath && _breath)
+        {
+            // Note: _model->LoadParameters and SaveParameters is needed
+            // before - see above.
+            _breath->UpdateParameters(_model, deltaTimeSeconds);
+        }
     }
 
     // 物理演算の設定
@@ -406,22 +365,6 @@ void LAppModel::Update()
         _physics->Evaluate(_model, deltaTimeSeconds);
     }
 
-    // リップシンクの設定
-    if (_lipSync)
-    {
-        // リアルタイムでリップシンクを行う場合、システムから音量を取得して0〜1の範囲で値を入力します。
-        csmFloat32 value = 0.0f;
-
-        // 状態更新/RMS値取得
-        _wavFileHandler.Update(deltaTimeSeconds);
-        value = _wavFileHandler.GetRms();
-
-        for (csmUint32 i = 0; i < _lipSyncIds.GetSize(); ++i)
-        {
-            _model->AddParameterValue(_lipSyncIds[i], value, 0.8f);
-        }
-    }
-
     // ポーズの設定
     if (_pose != NULL)
     {
@@ -432,7 +375,7 @@ void LAppModel::Update()
 
 }
 
-CubismMotionQueueEntryHandle LAppModel::StartMotion(const csmChar* group, csmInt32 no, csmInt32 priority, ACubismMotion::FinishedMotionCallback onFinishedMotionHandler, ACubismMotion::BeganMotionCallback onBeganMotionHandler)
+CubismMotionQueueEntryHandle LAppModel::StartMotion(const csmChar* group, csmInt32 no, csmInt32 priority, ACubismMotion::FinishedMotionCallback onFinishedMotionHandler)
 {
     if (priority == PriorityForce)
     {
@@ -442,7 +385,7 @@ CubismMotionQueueEntryHandle LAppModel::
     {
         if (_debugMode)
         {
-            LAppPal::PrintLogLn("[APP]can't start motion.");
+            LAppPal::PrintLog("[APP]can't start motion.");
         }
         return InvalidMotionQueueEntryHandleValue;
     }
@@ -462,19 +405,25 @@ CubismMotionQueueEntryHandle LAppModel::
         csmByte* buffer;
         csmSizeInt size;
         buffer = CreateBuffer(path.GetRawString(), &size);
-        motion = static_cast<CubismMotion*>(LoadMotion(buffer, size, NULL, onFinishedMotionHandler, onBeganMotionHandler, _modelSetting, group, no));
+        motion = static_cast<CubismMotion*>(LoadMotion(buffer, size, NULL, onFinishedMotionHandler));
+        csmFloat32 fadeTime = _modelSetting->GetMotionFadeInTimeValue(group, no);
+        if (fadeTime >= 0.0f)
+        {
+            motion->SetFadeInTime(fadeTime);
+        }
 
-        if (motion)
+        fadeTime = _modelSetting->GetMotionFadeOutTimeValue(group, no);
+        if (fadeTime >= 0.0f)
         {
-            motion->SetEffectIds(_eyeBlinkIds, _lipSyncIds);
-            autoDelete = true; // 終了時にメモリから削除
+            motion->SetFadeOutTime(fadeTime);
         }
+        motion->SetEffectIds(_eyeBlinkIds, _lipSyncIds);
+        autoDelete = true; // 終了時にメモリから削除
 
         DeleteBuffer(buffer, path.GetRawString());
     }
     else
     {
-        motion->SetBeganMotionHandler(onBeganMotionHandler);
         motion->SetFinishedMotionHandler(onFinishedMotionHandler);
     }
 
@@ -484,17 +433,16 @@ CubismMotionQueueEntryHandle LAppModel::
     {
         csmString path = voice;
         path = _modelHomeDir + path;
-        _wavFileHandler.Start(path);
     }
 
     if (_debugMode)
     {
-        LAppPal::PrintLogLn("[APP]start motion: [%s_%d]", group, no);
+        LAppPal::PrintLog("[APP]start motion: [%s_%d]", group, no);
     }
     return  _motionManager->StartMotionPriority(motion, autoDelete, priority);
 }
 
-CubismMotionQueueEntryHandle LAppModel::StartRandomMotion(const csmChar* group, csmInt32 priority, ACubismMotion::FinishedMotionCallback onFinishedMotionHandler, ACubismMotion::BeganMotionCallback onBeganMotionHandler)
+CubismMotionQueueEntryHandle LAppModel::StartRandomMotion(const csmChar* group, csmInt32 priority, ACubismMotion::FinishedMotionCallback onFinishedMotionHandler)
 {
     if (_modelSetting->GetMotionCount(group) == 0)
     {
@@ -503,7 +451,7 @@ CubismMotionQueueEntryHandle LAppModel::
 
     csmInt32 no = rand() % _modelSetting->GetMotionCount(group);
 
-    return StartMotion(group, no, priority, onFinishedMotionHandler, onBeganMotionHandler);
+    return StartMotion(group, no, priority, onFinishedMotionHandler);
 }
 
 void LAppModel::DoDraw()
@@ -554,16 +502,16 @@ void LAppModel::SetExpression(const csmC
     ACubismMotion* motion = _expressions[expressionID];
     if (_debugMode)
     {
-        LAppPal::PrintLogLn("[APP]expression: [%s]", expressionID);
+        LAppPal::PrintLog("[APP]expression: [%s]", expressionID);
     }
 
     if (motion != NULL)
     {
-        _expressionManager->StartMotion(motion, false);
+        _expressionManager->StartMotionPriority(motion, false, PriorityForce);
     }
     else
     {
-        if (_debugMode) LAppPal::PrintLogLn("[APP]expression[%s] is null ", expressionID);
+        if (_debugMode) LAppPal::PrintLog("[APP]expression[%s] is null ", expressionID);
     }
 }
 
@@ -636,3 +584,37 @@ Csm::Rendering::CubismOffscreenSurface_O
 {
     return _renderBuffer;
 }
+
+void LAppModel::SetFacialLandmarkDetector(FacialLandmarkDetector *detector)
+{
+    _detector = detector;
+}
+
+Csm::csmString LAppModel::_(std::string s)
+{
+    std::string ans;
+    if (_useOldParamId)
+    {
+        if (s == "ParamTere")
+        {
+            ans = "PARAM_CHEEK";
+        }
+        else
+        {
+            for (size_t i = 0; i < s.size(); i++)
+            {
+                if (std::isupper(s[i]) && i != 0)
+                {
+                    ans += '_';
+                }
+                ans += std::toupper(s[i]);
+            }
+        }
+    }
+    else
+    {
+        ans = s;
+    }
+    return csmString(ans.c_str());
+}
+
diff -pruN --exclude build ./demo_clean/src/LAppModel.hpp ./demo_dev/src/LAppModel.hpp
--- ./demo_clean/src/LAppModel.hpp	2025-02-14 07:18:07.000000000 +0000
+++ ./demo_dev/src/LAppModel.hpp	2024-03-28 18:01:22.296448336 +0000
@@ -13,7 +13,7 @@
 #include <Type/csmRectF.hpp>
 #include <Rendering/OpenGL/CubismOffscreenSurface_OpenGLES2.hpp>
 
-#include "LAppWavFileHandler.hpp"
+#include "facial_landmark_detector.h"
 
 /**
  * @brief ユーザーが実際に使用するモデルの実装クラス<br>
@@ -25,8 +25,11 @@ class LAppModel : public Csm::CubismUser
 public:
     /**
      * @brief コンストラクタ
+     *
+     * @param[in] useOldParamId : If true, translate new (Cubism 3+)
+     *                            parameter IDs to old (Cubism 2.1)  ones
      */
-    LAppModel();
+    LAppModel(bool useOldParamId);
 
     /**
      * @brief デストラクタ
@@ -66,10 +69,9 @@ public:
      * @param[in]   no                          グループ内の番号
      * @param[in]   priority                    優先度
      * @param[in]   onFinishedMotionHandler     モーション再生終了時に呼び出されるコールバック関数。NULLの場合、呼び出されない。
-     * @param[in]   onBeganMotionHandler        モーション再生開始時に呼び出されるコールバック関数。NULLの場合、呼び出されない。
      * @return                                  開始したモーションの識別番号を返す。個別のモーションが終了したか否かを判定するIsFinished()の引数で使用する。開始できない時は「-1」
      */
-    Csm::CubismMotionQueueEntryHandle StartMotion(const Csm::csmChar* group, Csm::csmInt32 no, Csm::csmInt32 priority, Csm::ACubismMotion::FinishedMotionCallback onFinishedMotionHandler = NULL, Csm::ACubismMotion::BeganMotionCallback onBeganMotionHandler = NULL);
+    Csm::CubismMotionQueueEntryHandle StartMotion(const Csm::csmChar* group, Csm::csmInt32 no, Csm::csmInt32 priority, Csm::ACubismMotion::FinishedMotionCallback onFinishedMotionHandler = NULL);
 
     /**
      * @brief   ランダムに選ばれたモーションの再生を開始する。
@@ -77,10 +79,9 @@ public:
      * @param[in]   group                       モーショングループ名
      * @param[in]   priority                    優先度
      * @param[in]   onFinishedMotionHandler     モーション再生終了時に呼び出されるコールバック関数。NULLの場合、呼び出されない。
-     * @param[in]   onBeganMotionHandler        モーション再生開始時に呼び出されるコールバック関数。NULLの場合、呼び出されない。
      * @return                                  開始したモーションの識別番号を返す。個別のモーションが終了したか否かを判定するIsFinished()の引数で使用する。開始できない時は「-1」
      */
-    Csm::CubismMotionQueueEntryHandle StartRandomMotion(const Csm::csmChar* group, Csm::csmInt32 priority, Csm::ACubismMotion::FinishedMotionCallback onFinishedMotionHandler = NULL, Csm::ACubismMotion::BeganMotionCallback onBeganMotionHandler = NULL);
+    Csm::CubismMotionQueueEntryHandle StartRandomMotion(const Csm::csmChar* group, Csm::csmInt32 priority, Csm::ACubismMotion::FinishedMotionCallback onFinishedMotionHandler = NULL);
 
     /**
      * @brief   引数で指定した表情モーションをセットする
@@ -116,6 +117,13 @@ public:
      */
     Csm::Rendering::CubismOffscreenSurface_OpenGLES2& GetRenderBuffer();
 
+    /**
+     * @brief Set the pointer to the FacialLandmarkDetector instance
+     *
+     * @param[in] detector : Pointer to FacialLandmarkDetector instance
+     */
+    void SetFacialLandmarkDetector(FacialLandmarkDetector *detector);
+
 protected:
     /**
      *  @brief  モデルを描画する処理。モデルを描画する空間のView-Projection行列を渡す。
@@ -169,6 +177,17 @@ private:
     */
     void ReleaseExpressions();
 
+    /**
+     * @brief Translate new (Cubism 3+) parameter IDs to old (Cubism 2.1) ones
+     *
+     * @param[in] s : New parameter ID
+     *
+     * @return Old parameter ID
+     */
+    Csm::csmString _(std::string s);
+
+    bool _useOldParamId;
+
     Csm::ICubismModelSetting* _modelSetting; ///< モデルセッティング情報
     Csm::csmString _modelHomeDir; ///< モデルセッティングが置かれたディレクトリ
     Csm::csmFloat32 _userTimeSeconds; ///< デルタ時間の積算値[秒]
@@ -185,7 +204,10 @@ private:
     const Csm::CubismId* _idParamEyeBallX; ///< パラメータID: ParamEyeBallX
     const Csm::CubismId* _idParamEyeBallY; ///< パラメータID: ParamEyeBallXY
 
-    LAppWavFileHandler _wavFileHandler; ///< wavファイルハンドラ
-
     Csm::Rendering::CubismOffscreenSurface_OpenGLES2 _renderBuffer;   ///< フレームバッファ以外の描画先
+
+    FacialLandmarkDetector *_detector;
 };
+
+
+
diff -pruN --exclude build ./demo_clean/src/LAppPal.cpp ./demo_dev/src/LAppPal.cpp
--- ./demo_clean/src/LAppPal.cpp	2025-02-14 07:18:07.000000000 +0000
+++ ./demo_dev/src/LAppPal.cpp	2024-03-28 18:01:22.296448336 +0000
@@ -6,6 +6,7 @@
  */
 
 #include "LAppPal.hpp"
+#include <stdexcept>
 #include <stdio.h>
 #include <stdlib.h>
 #include <stdarg.h>
@@ -36,37 +37,18 @@ csmByte* LAppPal::LoadFileAsBytes(const
     if (stat(path, &statBuf) == 0)
     {
         size = statBuf.st_size;
-
-        if (size == 0)
-        {
-            if (DebugLogEnable)
-            {
-                PrintLogLn("Stat succeeded but file size is zero. path:%s", path);
-            }
-            return NULL;
-        }
-    }
-    else
-    {
-        if (DebugLogEnable)
-        {
-            PrintLogLn("Stat failed. errno:%d path:%s", errno, path);
-        }
-        return NULL;
+        PrintLog(path);
     }
 
     std::fstream file;
+    char* buf = new char[size];
+
     file.open(path, std::ios::in | std::ios::binary);
     if (!file.is_open())
     {
-        if (DebugLogEnable)
-        {
-            PrintLogLn("File open failed. path:%s", path);
-        }
+        throw std::runtime_error("Failed to open file " + filePath);
         return NULL;
     }
-
-    char* buf = new char[size];
     file.read(buf, size);
     file.close();
 
@@ -97,17 +79,7 @@ void LAppPal::PrintLog(const csmChar* fo
     csmChar buf[256];
     va_start(args, format);
     vsnprintf(buf, sizeof(buf), format, args); // 標準出力でレンダリング
-    std::cout << buf;
-    va_end(args);
-}
-
-void LAppPal::PrintLogLn(const csmChar* format, ...)
-{
-    va_list args;
-    csmChar buf[256];
-    va_start(args, format);
-    vsnprintf(buf, sizeof(buf), format, args); // 標準出力でレンダリング
-    std::cout << buf << std::endl;
+    std::cerr << buf << std::endl;
     va_end(args);
 }
 
@@ -115,8 +87,3 @@ void LAppPal::PrintMessage(const csmChar
 {
     PrintLog("%s", message);
 }
-
-void LAppPal::PrintMessageLn(const csmChar* message)
-{
-    PrintLogLn("%s", message);
-}
diff -pruN --exclude build ./demo_clean/src/LAppPal.hpp ./demo_dev/src/LAppPal.hpp
--- ./demo_clean/src/LAppPal.hpp	2025-02-14 07:18:07.000000000 +0000
+++ ./demo_dev/src/LAppPal.hpp	2024-03-28 18:01:22.296448336 +0000
@@ -63,17 +63,6 @@ public:
     static void PrintLog(const Csm::csmChar* format, ...);
 
     /**
-    * @brief ログを出力し最後に改行する
-    *
-    * ログを出力し最後に改行する
-    *
-    * @param[in]   format  書式付文字列
-    * @param[in]   ...     (可変長引数)文字列
-    *
-    */
-    static void PrintLogLn(const Csm::csmChar* format, ...);
-
-    /**
     * @brief メッセージを出力する
     *
     * メッセージを出力する
@@ -83,16 +72,6 @@ public:
     */
     static void PrintMessage(const Csm::csmChar* message);
 
-    /**
-    * @brief メッセージを出力し最後に改行する
-    *
-    * メッセージを出力し最後に改行する
-    *
-    * @param[in]   message  文字列
-    *
-    */
-    static void PrintMessageLn(const Csm::csmChar* message);
-
 private:
     static double s_currentFrame;
     static double s_lastFrame;
diff -pruN --exclude build ./demo_clean/src/LAppSpriteShader.cpp ./demo_dev/src/LAppSpriteShader.cpp
--- ./demo_clean/src/LAppSpriteShader.cpp	2025-02-14 07:18:07.000000000 +0000
+++ ./demo_dev/src/LAppSpriteShader.cpp	1970-01-01 01:00:00.000000000 +0100
@@ -1,107 +0,0 @@
-﻿/**
- * Copyright(c) Live2D Inc. All rights reserved.
- *
- * Use of this source code is governed by the Live2D Open Software license
- * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.
- */
-
-#include "LAppSpriteShader.hpp"
-
-#include "LAppDefine.hpp"
-#include "LAppLive2DManager.hpp"
-#include "LAppPal.hpp"
-
-LAppSpriteShader::LAppSpriteShader()
-{
-    _programId = CreateShader();
-}
-
-LAppSpriteShader::~LAppSpriteShader()
-{
-    glDeleteShader(_programId);
-}
-
-GLuint LAppSpriteShader::GetShaderId() const
-{
-    return _programId;
-}
-
-GLuint LAppSpriteShader::CreateShader()
-{
-    // シェーダーのパスの作成
-    Csm::csmString vertShaderFile(LAppDefine::ShaderPath);
-    vertShaderFile += LAppDefine::VertShaderName;
-    Csm::csmString fragShaderFile(LAppDefine::ShaderPath);
-    fragShaderFile += LAppDefine::FragShaderName;
-
-    // シェーダーのコンパイル
-    GLuint vertexShaderId = CompileShader(vertShaderFile, GL_VERTEX_SHADER);
-    GLuint fragmentShaderId = CompileShader(fragShaderFile, GL_FRAGMENT_SHADER);
-
-    if (!vertexShaderId || !fragmentShaderId)
-    {
-        return 0;
-    }
-
-    //プログラムオブジェクトの作成
-    GLuint programId = glCreateProgram();
-    glAttachShader(programId, vertexShaderId);
-    glAttachShader(programId, fragmentShaderId);
-
-    // リンク
-    glLinkProgram(programId);
-
-    glUseProgram(programId);
-
-    // 不要になったシェーダーオブジェクトの削除
-    glDeleteShader(vertexShaderId);
-    glDeleteShader(fragmentShaderId);
-
-    return programId;
-}
-
-bool LAppSpriteShader::CheckShader(GLuint shaderId)
-{
-    GLint status;
-    GLint logLength;
-    glGetShaderiv(shaderId, GL_INFO_LOG_LENGTH, &logLength);
-    if (logLength > 0)
-    {
-        GLchar* log = reinterpret_cast<GLchar*>(CSM_MALLOC(logLength));
-        glGetShaderInfoLog(shaderId, logLength, &logLength, log);
-        CubismLogError("Shader compile log: %s", log);
-        CSM_FREE(log);
-    }
-
-    glGetShaderiv(shaderId, GL_COMPILE_STATUS, &status);
-    if (status == GL_FALSE)
-    {
-        glDeleteShader(shaderId);
-        return false;
-    }
-
-    return true;
-}
-
-GLuint LAppSpriteShader::CompileShader(Csm::csmString filename, GLenum shaderType)
-{
-    // ファイル読み込み
-    Csm::csmSizeInt bufferSize = 0;
-    const char* shaderString = reinterpret_cast<const char*>(LAppPal::LoadFileAsBytes(filename.GetRawString(), &bufferSize));
-    const GLint glSize = (GLint)bufferSize;
-
-    // コンパイル
-    GLuint shaderId = glCreateShader(shaderType);
-    glShaderSource(shaderId, 1, &shaderString, &glSize);
-    glCompileShader(shaderId);
-
-    // 読み込んだシェーダー文字列の開放
-    LAppPal::ReleaseBytes(reinterpret_cast<Csm::csmByte*>(const_cast<char*>(shaderString)));
-
-    if (!CheckShader(shaderId))
-    {
-        return 0;
-    }
-
-    return shaderId;
-}
diff -pruN --exclude build ./demo_clean/src/LAppSpriteShader.hpp ./demo_dev/src/LAppSpriteShader.hpp
--- ./demo_clean/src/LAppSpriteShader.hpp	2025-02-14 07:18:07.000000000 +0000
+++ ./demo_dev/src/LAppSpriteShader.hpp	1970-01-01 01:00:00.000000000 +0100
@@ -1,57 +0,0 @@
-﻿/**
- * Copyright(c) Live2D Inc. All rights reserved.
- *
- * Use of this source code is governed by the Live2D Open Software license
- * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.
- */
-
-#pragma once
-
-#include <GL/glew.h>
-#include <GLFW/glfw3.h>
-#include <Utils/CubismString.hpp>
-#include "CubismFramework.hpp"
-
-/**
-* @brief スプライト用のシェーダー設定を保持するクラス
-*/
-class LAppSpriteShader
-{
-public:
-    /**
-     * @brief コンストラクタ
-     */
-    LAppSpriteShader();
-
-    /**
-     * @brief デストラクタ
-     */
-    ~LAppSpriteShader();
-
-    /**
-     * @brief   シェーダーIDを取得する
-     */
-    GLuint GetShaderId() const;
-
-private:
-    /**
-    * @brief シェーダーを作成する。
-    */
-    GLuint CreateShader();
-
-    /**
-     * @brief   CreateShader内部関数 エラーチェック
-     */
-    bool CheckShader(GLuint shaderId);
-
-    /**
-     * @brief シェーダーをコンパイルする
-     *        コンパイルに失敗した場合には 0 が戻る。
-     *
-     * @param[in]       filename     シェーダーファイル名
-     * @param[in]       shaderType   作成するシェーダーの種類
-     */
-    GLuint CompileShader(Csm::csmString filename, GLenum shaderType);
-
-    GLuint _programId;                       ///< シェーダID
-};
diff -pruN --exclude build ./demo_clean/src/LAppTextureManager.cpp ./demo_dev/src/LAppTextureManager.cpp
--- ./demo_clean/src/LAppTextureManager.cpp	2025-02-14 07:18:07.000000000 +0000
+++ ./demo_dev/src/LAppTextureManager.cpp	2024-03-28 18:01:22.300448398 +0000
@@ -96,11 +96,50 @@ LAppTextureManager::TextureInfo* LAppTex
 
 }
 
+LAppTextureManager::TextureInfo* LAppTextureManager::CreateTextureFromColor(
+    uint8_t red, uint8_t green, uint8_t blue, uint8_t alpha
+)
+{
+    int width = 8, height = 8;
+
+    uint8_t pixels[height][width][4];
+    for (std::size_t h = 0; h < height; h++)
+    {
+        for (std::size_t w = 0; w < width; w++)
+        {
+            pixels[h][w][0] = red;
+            pixels[h][w][1] = green;
+            pixels[h][w][2] = blue;
+            pixels[h][w][3] = alpha;
+        }
+    }
+
+    GLuint textureId;
+    glGenTextures(1, &textureId);
+    glBindTexture(GL_TEXTURE_2D, textureId);
+    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, width, height, 0, GL_RGBA, GL_UNSIGNED_BYTE, pixels);
+
+    glGenerateMipmap(GL_TEXTURE_2D);
+    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
+    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
+    glBindTexture(GL_TEXTURE_2D, 0);
+
+
+    LAppTextureManager::TextureInfo* textureInfo = new LAppTextureManager::TextureInfo();
+    textureInfo->fileName = "";
+    textureInfo->width = width;
+    textureInfo->height = height;
+    textureInfo->id = textureId;
+
+    _textures.PushBack(textureInfo);
+
+    return textureInfo;
+}
+
 void LAppTextureManager::ReleaseTextures()
 {
     for (Csm::csmUint32 i = 0; i < _textures.GetSize(); i++)
     {
-        glDeleteTextures(1, &(_textures[i]->id));
         delete _textures[i];
     }
 
@@ -115,7 +154,6 @@ void LAppTextureManager::ReleaseTexture(
         {
             continue;
         }
-        glDeleteTextures(1, &(_textures[i]->id));
         delete _textures[i];
         _textures.Remove(i);
         break;
@@ -128,7 +166,6 @@ void LAppTextureManager::ReleaseTexture(
     {
         if (_textures[i]->fileName == fileName)
         {
-            glDeleteTextures(1, &(_textures[i]->id));
             delete _textures[i];
             _textures.Remove(i);
             break;
diff -pruN --exclude build ./demo_clean/src/LAppTextureManager.hpp ./demo_dev/src/LAppTextureManager.hpp
--- ./demo_clean/src/LAppTextureManager.hpp	2025-02-14 07:18:07.000000000 +0000
+++ ./demo_dev/src/LAppTextureManager.hpp	2024-03-28 18:01:22.300448398 +0000
@@ -72,6 +72,8 @@ public:
     */
     TextureInfo* CreateTextureFromPngFile(std::string fileName);
 
+    TextureInfo *CreateTextureFromColor(uint8_t red, uint8_t green, uint8_t blue, uint8_t alpha = 255);
+
     /**
     * @brief 画像の解放
     *
diff -pruN --exclude build ./demo_clean/src/LAppView.cpp ./demo_dev/src/LAppView.cpp
--- ./demo_clean/src/LAppView.cpp	2025-02-14 07:18:07.000000000 +0000
+++ ./demo_dev/src/LAppView.cpp	2024-03-28 18:02:43.449711143 +0000
@@ -13,9 +13,7 @@
 #include "LAppLive2DManager.hpp"
 #include "LAppTextureManager.hpp"
 #include "LAppDefine.hpp"
-#include "TouchManager.hpp"
 #include "LAppSprite.hpp"
-#include "LAppSpriteShader.hpp"
 #include "LAppModel.hpp"
 
 #include <Rendering/OpenGL/CubismOffscreenSurface_OpenGLES2.hpp>
@@ -25,9 +23,8 @@ using namespace std;
 using namespace LAppDefine;
 
 LAppView::LAppView():
+    _programId(0),
     _back(NULL),
-    _gear(NULL),
-    _power(NULL),
     _renderSprite(NULL),
     _renderTarget(SelectTarget_None)
 {
@@ -35,8 +32,6 @@ LAppView::LAppView():
     _clearColor[1] = 1.0f;
     _clearColor[2] = 1.0f;
     _clearColor[3] = 0.0f;
-    // タッチ関係のイベント管理
-    _touchManager = new TouchManager();
 
     // デバイス座標からスクリーン座標に変換するための
     _deviceToScreen = new CubismMatrix44();
@@ -48,15 +43,11 @@ LAppView::LAppView():
 LAppView::~LAppView()
 {
     _renderBuffer.DestroyOffscreenSurface();
-    delete _spriteShader;
     delete _renderSprite;
 
     delete _viewMatrix;
     delete _deviceToScreen;
-    delete _touchManager;
     delete _back;
-    delete _gear;
-    delete _power;
 }
 
 void LAppView::Initialize()
@@ -103,17 +94,11 @@ void LAppView::Initialize()
         ViewLogicalMaxBottom,
         ViewLogicalMaxTop
     );
-
-    // シェーダー作成
-    _spriteShader = new LAppSpriteShader();
 }
 
 void LAppView::Render()
 {
     _back->Render();
-    _gear->Render();
-    _power->Render();
-
 
     LAppLive2DManager* Live2DManager = LAppLive2DManager::GetInstance();
 
@@ -149,92 +134,28 @@ void LAppView::Render()
 
 void LAppView::InitializeSprite()
 {
-    GLuint programId = _spriteShader->GetShaderId();
+    _programId = LAppDelegate::GetInstance()->CreateShader();
 
     int width, height;
     glfwGetWindowSize(LAppDelegate::GetInstance()->GetWindow(), &width, &height);
 
     LAppTextureManager* textureManager = LAppDelegate::GetInstance()->GetTextureManager();
-    const string resourcesPath = LAppDelegate::GetInstance()->GetExecuteAbsolutePath() + ResourcesPath;
 
-    string imageName = BackImageName;
-    LAppTextureManager::TextureInfo* backgroundTexture = textureManager->CreateTextureFromPngFile(resourcesPath + imageName);
+
+    LAppTextureManager::TextureInfo* backgroundTexture =
+        textureManager->CreateTextureFromColor(0, 255, 0);
 
     float x = width * 0.5f;
     float y = height * 0.5f;
-    float fWidth = static_cast<float>(backgroundTexture->width * 2.0f);
-    float fHeight = static_cast<float>(height) * 0.95f;
-    _back = new LAppSprite(x, y, fWidth, fHeight, backgroundTexture->id, programId);
-
-    imageName = GearImageName;
-    LAppTextureManager::TextureInfo* gearTexture = textureManager->CreateTextureFromPngFile(resourcesPath + imageName);
-
-    x = static_cast<float>(width - gearTexture->width * 0.5f);
-    y = static_cast<float>(height - gearTexture->height * 0.5f);
-    fWidth = static_cast<float>(gearTexture->width);
-    fHeight = static_cast<float>(gearTexture->height);
-    _gear = new LAppSprite(x, y, fWidth, fHeight, gearTexture->id, programId);
-
-    imageName = PowerImageName;
-    LAppTextureManager::TextureInfo* powerTexture = textureManager->CreateTextureFromPngFile(resourcesPath + imageName);
-
-    x = static_cast<float>(width - powerTexture->width * 0.5f);
-    y = static_cast<float>(powerTexture->height * 0.5f);
-    fWidth = static_cast<float>(powerTexture->width);
-    fHeight = static_cast<float>(powerTexture->height);
-    _power = new LAppSprite(x, y, fWidth, fHeight, powerTexture->id, programId);
+    float fWidth = static_cast<float>(width);
+    float fHeight = static_cast<float>(height);
+    _back = new LAppSprite(x, y, fWidth, fHeight, backgroundTexture->id, _programId);
 
     // 画面全体を覆うサイズ
     x = width * 0.5f;
     y = height * 0.5f;
-    _renderSprite = new LAppSprite(x, y, static_cast<float>(width), static_cast<float>(height), 0, programId);
-
-}
-
-void LAppView::OnTouchesBegan(float px, float py) const
-{
-    _touchManager->TouchesBegan(px, py);
-}
-
-void LAppView::OnTouchesMoved(float px, float py) const
-{
-    float viewX = this->TransformViewX(_touchManager->GetX());
-    float viewY = this->TransformViewY(_touchManager->GetY());
-
-    _touchManager->TouchesMoved(px, py);
-
-    LAppLive2DManager* Live2DManager = LAppLive2DManager::GetInstance();
-    Live2DManager->OnDrag(viewX, viewY);
-}
-
-void LAppView::OnTouchesEnded(float px, float py) const
-{
-    // タッチ終了
-    LAppLive2DManager* live2DManager = LAppLive2DManager::GetInstance();
-    live2DManager->OnDrag(0.0f, 0.0f);
-    {
-
-        // シングルタップ
-        float x = _deviceToScreen->TransformX(_touchManager->GetX()); // 論理座標変換した座標を取得。
-        float y = _deviceToScreen->TransformY(_touchManager->GetY()); // 論理座標変換した座標を取得。
-        if (DebugTouchLogEnable)
-        {
-            LAppPal::PrintLogLn("[APP]touchesEnded x:%.2f y:%.2f", x, y);
-        }
-        live2DManager->OnTap(x, y);
+    _renderSprite = new LAppSprite(x, y, static_cast<float>(width), static_cast<float>(height), 0, _programId);
 
-        // 歯車にタップしたか
-        if (_gear->IsHit(px, py))
-        {
-            live2DManager->NextScene();
-        }
-
-        // 電源ボタンにタップしたか
-        if (_power->IsHit(px, py))
-        {
-            LAppDelegate::GetInstance()->AppEnd();
-        }
-    }
 }
 
 float LAppView::TransformViewX(float deviceX) const
@@ -378,32 +299,4 @@ void LAppView::ResizeSprite()
             _back->ResetRect(x, y, fWidth, fHeight);
         }
     }
-
-    if (_power)
-    {
-        GLuint id = _power->GetTextureId();
-        LAppTextureManager::TextureInfo* texInfo = textureManager->GetTextureInfoById(id);
-        if (texInfo)
-        {
-            x = static_cast<float>(width - texInfo->width * 0.5f);
-            y = static_cast<float>(texInfo->height * 0.5f);
-            fWidth = static_cast<float>(texInfo->width);
-            fHeight = static_cast<float>(texInfo->height);
-            _power->ResetRect(x, y, fWidth, fHeight);
-        }
-    }
-
-    if (_gear)
-    {
-        GLuint id = _gear->GetTextureId();
-        LAppTextureManager::TextureInfo* texInfo = textureManager->GetTextureInfoById(id);
-        if (texInfo)
-        {
-            x = static_cast<float>(width - texInfo->width * 0.5f);
-            y = static_cast<float>(height - texInfo->height * 0.5f);
-            fWidth = static_cast<float>(texInfo->width);
-            fHeight = static_cast<float>(texInfo->height);
-            _gear->ResetRect(x, y, fWidth, fHeight);
-        }
-    }
 }
diff -pruN --exclude build ./demo_clean/src/LAppView.hpp ./demo_dev/src/LAppView.hpp
--- ./demo_clean/src/LAppView.hpp	2025-02-14 07:18:07.000000000 +0000
+++ ./demo_dev/src/LAppView.hpp	2024-03-28 18:01:22.300448398 +0000
@@ -14,9 +14,7 @@
 #include "CubismFramework.hpp"
 #include <Rendering/OpenGL/CubismOffscreenSurface_OpenGLES2.hpp>
 
-class TouchManager;
 class LAppSprite;
-class LAppSpriteShader;
 class LAppModel;
 
 /**
@@ -67,30 +65,6 @@ public:
     void ResizeSprite();
 
     /**
-    * @brief タッチされたときに呼ばれる。
-    *
-    * @param[in]       pointX            スクリーンX座標
-    * @param[in]       pointY            スクリーンY座標
-    */
-    void OnTouchesBegan(float pointX, float pointY) const;
-
-    /**
-    * @brief タッチしているときにポインタが動いたら呼ばれる。
-    *
-    * @param[in]       pointX            スクリーンX座標
-    * @param[in]       pointY            スクリーンY座標
-    */
-    void OnTouchesMoved(float pointX, float pointY) const;
-
-    /**
-    * @brief タッチが終了したら呼ばれる。
-    *
-    * @param[in]       pointX            スクリーンX座標
-    * @param[in]       pointY            スクリーンY座標
-    */
-    void OnTouchesEnded(float pointX, float pointY) const;
-
-    /**
     * @brief X座標をView座標に変換する。
     *
     * @param[in]       deviceX            デバイスX座標
@@ -148,18 +122,14 @@ public:
     void SetRenderTargetClearColor(float r, float g, float b);
 
 private:
-    TouchManager* _touchManager;                 ///< タッチマネージャー
     Csm::CubismMatrix44* _deviceToScreen;    ///< デバイスからスクリーンへの行列
     Csm::CubismViewMatrix* _viewMatrix;      ///< viewMatrix
+    GLuint _programId;                       ///< シェーダID
     LAppSprite* _back;                       ///< 背景画像
-    LAppSprite* _gear;                       ///< ギア画像
-    LAppSprite* _power;                      ///< 電源画像
 
     // レンダリング先を別ターゲットにする方式の場合に使用
     LAppSprite* _renderSprite;                                  ///< モードによっては_renderBufferのテクスチャを描画
     Csm::Rendering::CubismOffscreenSurface_OpenGLES2 _renderBuffer;   ///< モードによってはCubismモデル結果をこっちにレンダリング
     SelectTarget _renderTarget;     ///< レンダリング先の選択肢
     float _clearColor[4];           ///< レンダリングターゲットのクリアカラー
-
-    LAppSpriteShader* _spriteShader;  ///< シェーダー作成委譲クラス
 };
diff -pruN --exclude build ./demo_clean/src/main.cpp ./demo_dev/src/main.cpp
--- ./demo_clean/src/main.cpp	2025-02-14 07:18:07.000000000 +0000
+++ ./demo_dev/src/main.cpp	2024-03-28 18:01:22.320448709 +0000
@@ -5,18 +5,162 @@
  * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.
  */
 
+#include <thread>
+#include <stdexcept>
+#include <sstream>
+
+#ifdef __cpp_lib_filesystem
+#include <filesystem>
+namespace fs = std::filesystem;
+#else
+#include <experimental/filesystem>
+namespace fs = std::experimental::filesystem;
+#endif
+
+
 #include "LAppDelegate.hpp"
+#include "LAppLive2DManager.hpp"
+#include "facial_landmark_detector.h"
+
+struct CmdArgs
+{
+    int windowWidth;
+    int windowHeight;
+    std::string windowTitle;
+    std::string rootDir;
+    float scaleFactor;
+    float translateX;
+    float translateY;
+    std::string modelName;
+    bool oldId; // If true, translate new (Cubism 3+) parameter IDs to old (Cubism 2.1) IDs
+    std::string cfgPath; // Path to config file for FacialLandmarkDetector
+};
+
+CmdArgs parseArgv(int argc, char *argv[])
+{
+    // I think the command-line args are simple enough to not justify using a library...
+    CmdArgs cmdArgs;
+    // Set default values
+    cmdArgs.windowWidth = 600;
+    cmdArgs.windowHeight = 600;
+    cmdArgs.windowTitle = "FacialLandmarksForCubism example";
+    cmdArgs.rootDir = fs::current_path();
+    cmdArgs.scaleFactor = 4.5f;
+    cmdArgs.translateX = 0.0f;
+    cmdArgs.translateY = -3.1f;
+    cmdArgs.modelName = "Haru";
+    cmdArgs.oldId = false;
+    cmdArgs.cfgPath = "";
+
+    int i = 1;
+    while (i < argc)
+    {
+        std::string arg = argv[i];
+        std::stringstream ss;
+
+        if (arg == "--window-width" || arg == "-W") // capital W for consistency with height
+        {
+            ss << argv[i + 1];
+            if (!(ss >> cmdArgs.windowWidth))
+            {
+                throw std::runtime_error("Invalid argument for window width");
+            }
+        }
+        else if (arg == "--window-height" || arg == "-H") // avoiding "-h", typically for help
+        {
+            ss << argv[i + 1];
+            if (!(ss >> cmdArgs.windowHeight))
+            {
+                throw std::runtime_error("Invalid argument for window height");
+            }
+        }
+        else if (arg == "--window-title" || arg == "-t")
+        {
+            cmdArgs.windowTitle = argv[i + 1];
+        }
+        else if (arg == "--root-dir" || arg == "-d")
+        {
+            cmdArgs.rootDir = argv[i + 1];
+        }
+        else if (arg == "--scale-factor" || arg == "-f")
+        {
+            ss << argv[i + 1];
+            if (!(ss >> cmdArgs.scaleFactor))
+            {
+                throw std::runtime_error("Invalid argument for scale factor");
+            }
+        }
+        else if (arg == "--translate-x" || arg == "-x")
+        {
+            ss << argv[i + 1];
+            if (!(ss >> cmdArgs.translateX))
+            {
+                throw std::runtime_error("Invalid argument for translate X");
+            }
+        }
+        else if (arg == "--translate-y" || arg == "-y")
+        {
+            ss << argv[i + 1];
+            if (!(ss >> cmdArgs.translateY))
+            {
+                throw std::runtime_error("Invalid argument for translate Y");
+            }
+        }
+        else if (arg == "--model" || arg == "-m")
+        {
+            cmdArgs.modelName = argv[i + 1];
+        }
+        else if (arg == "--config" || arg == "-c")
+        {
+            cmdArgs.cfgPath = argv[i + 1];
+        }
+        else if (arg == "--old-param-id" || arg == "-o")
+        {
+            cmdArgs.oldId = (argv[i + 1][0] == '1');
+        }
+        else
+        {
+            throw std::runtime_error("Unrecognized argument: " + arg);
+        }
+
+        i += 2;
+    }
+
+    return cmdArgs;
+}
 
 int main(int argc, char* argv[])
 {
-    // create the application instance
-    if (LAppDelegate::GetInstance()->Initialize() == GL_FALSE)
+    auto cmdArgs = parseArgv(argc, argv);
+
+    LAppDelegate *delegate = LAppDelegate::GetInstance();
+
+    if (!delegate->Initialize(cmdArgs.windowWidth,
+                              cmdArgs.windowHeight,
+                              cmdArgs.windowTitle.c_str()))
     {
-        return 1;
+        throw std::runtime_error("Unable to initialize LAppDelegate");
     }
 
-    LAppDelegate::GetInstance()->Run();
+    delegate->SetRootDirectory(cmdArgs.rootDir);
+
+    FacialLandmarkDetector detector(cmdArgs.cfgPath);
+
+    std::thread detectorThread(&FacialLandmarkDetector::mainLoop,
+                               &detector);
+
+    LAppLive2DManager *manager = LAppLive2DManager::GetInstance();
+    manager->SetModel(cmdArgs.modelName, cmdArgs.oldId);
+
+    manager->SetProjectionScaleTranslate(cmdArgs.scaleFactor,
+                                         cmdArgs.translateX,
+                                         cmdArgs.translateY);
+    manager->SetFacialLandmarkDetector(&detector);
+
+    delegate->Run();
+
+    detector.stop();
+    detectorThread.join();
 
     return 0;
 }
-
diff -pruN --exclude build ./demo_clean/src/mainMinimum.cpp ./demo_dev/src/mainMinimum.cpp
--- ./demo_clean/src/mainMinimum.cpp	2025-02-14 07:18:07.000000000 +0000
+++ ./demo_dev/src/mainMinimum.cpp	2024-03-28 18:01:22.320448709 +0000
@@ -9,7 +9,6 @@
 
 #include <sstream>
 #include <unistd.h>
-#include <libgen.h>
 #include <GL/glew.h>
 #include <GLFW/glfw3.h>
 
@@ -62,7 +61,7 @@ static LAppAllocator _cubismAllocator; /
 
 static LAppTextureManager* _textureManager; ///< テクスチャの管理
 
-static std::string _executeAbsolutePath; ///< アプリケーションの実行パス
+static std::string _rootDirectory; ///< ルートディレクトリ
 static std::string _currentModelDirectory; ///< 現在のモデルのディレクトリ名
 
 static GLFWwindow* _window; ///< ウィンドウオブジェクト
@@ -86,11 +85,33 @@ static void InitializeCubism()
 }
 
 /**
-* @brief アプリケーションの実行パスの設定
+* @brief 文字列の分割
 *
-* Linuxのアプリケーションの実行パスを確認し、パスを取得する
+* 指定された区切り文字で文字列を分割する
 */
-void SetExecuteAbsolutePath()
+Csm::csmVector<std::string> Split(const std::string& baseString, char delimiter)
+{
+    Csm::csmVector < std::string > elems;
+    std::stringstream ss(baseString);
+    std::string item;
+
+    while (getline(ss, item, delimiter))
+    {
+        if (!item.empty())
+        {
+            elems.PushBack(item);
+        }
+    }
+
+    return elems;
+}
+
+/**
+* @brief ルートディレクトリの設定
+*
+* Linuxのルートディレクトリを確認し、パスを取得する
+*/
+void SetRootDirectory()
 {
     const int maximumPathBufferSize = 1024;
     char path[maximumPathBufferSize];
@@ -101,8 +122,19 @@ void SetExecuteAbsolutePath()
         path[len] = '\0';
     }
 
-    _executeAbsolutePath = dirname(path);
-    _executeAbsolutePath += "/";
+    std::string pathString(path);
+
+    pathString = pathString.substr(0, pathString.rfind("Demo"));
+    Csm::csmVector<std::string> splitStrings = Split(pathString, '/');
+
+    _rootDirectory = "";
+
+    for (int i = 0; i < splitStrings.GetSize(); i++)
+    {
+        _rootDirectory += "/" + splitStrings[i];
+    }
+
+    _rootDirectory += "/";
 }
 
 /**
@@ -112,12 +144,12 @@ void SetExecuteAbsolutePath()
 */
 static bool InitializeSystem()
 {
-    LAppPal::PrintLogLn("START");
+    LAppPal::PrintLog("START");
 
     // GLFWの初期化
     if (glfwInit() == GL_FALSE)
     {
-        LAppPal::PrintLogLn("Can't initilize GLFW");
+        LAppPal::PrintLog("Can't initilize GLFW");
 
         return GL_FALSE;
     }
@@ -126,7 +158,7 @@ static bool InitializeSystem()
     _window = glfwCreateWindow(LAppDefine::RenderTargetWidth, LAppDefine::RenderTargetHeight, "SIMPLE_SAMPLE", NULL, NULL);
     if (_window == NULL)
     {
-        LAppPal::PrintLogLn("Can't create GLFW window.");
+        LAppPal::PrintLog("Can't create GLFW window.");
 
         glfwTerminate();
         return GL_FALSE;
@@ -137,7 +169,7 @@ static bool InitializeSystem()
     glfwSwapInterval(1);
 
     if (glewInit() != GLEW_OK) {
-        LAppPal::PrintLogLn("Can't initilize glew.");
+        LAppPal::PrintLog("Can't initilize glew.");
 
         glfwTerminate();
         return GL_FALSE;
@@ -165,7 +197,7 @@ static bool InitializeSystem()
     // ドラッグ入力管理クラスの初期化
     MouseActionManager::GetInstance()->Initialize(windowWidth, windowHeight);
 
-    SetExecuteAbsolutePath();
+    SetRootDirectory();
 
     return GL_TRUE;
 }
@@ -209,7 +241,7 @@ void Release()
 void LoadModel(const std::string modelDirectoryName)
 {
     // モデルのディレクトリを指定
-    _currentModelDirectory = _executeAbsolutePath + LAppDefine::ResourcesPath + modelDirectoryName + "/";
+    _currentModelDirectory = _rootDirectory + LAppDefine::ResourcesPath + modelDirectoryName + "/";
 
     // モデルデータの新規生成
     _userModel = new CubismUserModelExtend(modelDirectoryName, _currentModelDirectory);
